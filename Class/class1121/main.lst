     1                                  ; Assembler 32bit template
     2                                  
     3                                  bits 32
     4                                  section .data
     5                                  ;variables with values go here
     6 00000000 66696C65312E747874-     	fileName db "file1.txt", 0h
     6 00000009 00                 
     7 0000000A 536F6D652064617461-     	fileText db "Some datat to put onto disk", 0h
     7 00000013 7420746F2070757420-
     7 0000001C 6F6E746F206469736B-
     7 00000025 00                 
     8                                  		.len equ ($ - fileText)
     9 00000026 0A0D                    	endl db 0ah, 0dh
    10                                  		.len equ ($ - endl)
    11                                  section .bss
    12                                  ;reserved memory goes here
    13 00000000 <res 00000004>          	outputFile resd 1
    14                                  	
    15 00000004 <res 00000004>          	inputFile resd  1
    16                                  	
    17 00000008 <res 000000FF>          	inputBuffer resb 255
    18                                  		.len equ ($ - inputBuffer)
    19                                  section .text
    20                                  ;Your program code goes here
    21                                  
    22                                  	global _start
    23                                  _start:
    24 00000000 90                          nop
    25                                  	
    26                                  	;Your program code should go here
    27                                  
    28 00000001 B808000000              	mov eax, 8h ;open for write
    29 00000006 BB[00000000]            	mov ebx, fileName ;address of file name
    30                                  	;mov ecx, 01ffh ;Octal 777
    31 0000000B B9B6010000              	mov ecx, 1b6h
    32 00000010 CD80                    	int 80h ;poke the kernel
    33 00000012 A3[00000000]            	mov [outputFile], eax ;Put our file details into eax
    34                                  	
    35                                  	
    36                                  	;---- PROCESS FILE -----
    37 00000017 B804000000              	mov eax, 4h ;write to  the file
    38 0000001C 8B1D[00000000]          	mov ebx, [outputFile] ;file descriptor
    39 00000022 B9[0A000000]            	mov ecx, fileText ;the adddress of the data we want to write
    40 00000027 BA1C000000              	mov edx, fileText.len ;the length of that data
    41 0000002C CD80                    	int 80h ;int = interrupt, meaning to poke the kernel
    42                                  	
    43                                  	;--------- WRITE A CARRIAGE RETURN AND LINE FEED ---------
    44 0000002E B804000000              	mov eax, 4h ;write to  the file
    45 00000033 8B1D[00000000]          	mov ebx, [outputFile] ;file descriptor
    46 00000039 B9[26000000]            	mov ecx, endl
    47 0000003E BA02000000              	mov edx, endl.len
    48 00000043 CD80                    	int 80h ;int = interrupt, meaning to poke the kernel
    49                                  	
    50                                  	
    51                                  	
    52                                  	;----------- CLOSE FILE -----------
    53 00000045 B806000000              	mov eax, 6h ;Close the file
    54 0000004A 8B1D[00000000]          	mov ebx, [outputFile] ;file descriptor
    55 00000050 CD80                    	int 80h;poke the kernel
    56                                  	
    57                                  	;------- OPEN THE FILE FOR READ -----------------
    58 00000052 B805000000              	mov eax, 5h ; open for read
    59 00000057 BB[00000000]            	mov ebx, fileName ;the name of the flie
    60 0000005C B900000000              	mov ecx, 0h ;read only
    61 00000061 CD80                    	int 80h ;poke the kernel
    62 00000063 A3[04000000]            	mov [inputFile], eax
    63                                  	
    64                                  	
    65                                  	;------------PROCESS INPUT FILE -----------
    66 00000068 B803000000              	mov eax, 3h ;read from this file
    67 0000006D 8B1D[04000000]          	mov ebx,[inputFile] ; the input file info
    68 00000073 B9[08000000]            	mov ecx, inputBuffer ;where the data read goes
    69 00000078 BAFF000000              	mov edx, inputBuffer.len ;the size of our input buffer
    70 0000007D CD80                    	int 80h; interuupt the kernel
    71                                  
    72                                  	;----------- CLOSE FILE -----------
    73 0000007F B806000000              	mov eax, 6h ;Close the file
    74 00000084 8B1D[04000000]          	mov ebx, [inputFile] ;file descriptor
    75 0000008A CD80                    	int 80h;poke the kernel
    76                                  	
    77                                  	
    78                                  	
    79                                  	
    80                                  	endit:
    81                                  	;Do not remove/change the lines below here.
    82                                  	;These exit out of the application and back
    83                                  	;to linux in an orderly fashion
    84 0000008C 90                      	nop
    85 0000008D B801000000              	mov eax,1      ; Exit system call value
    86 00000092 BB00000000              	mov ebx,0      ; Exit return code
    87 00000097 CD80                    	int 80h        ; Call the kernel
