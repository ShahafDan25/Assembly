     1                                  ; Assembler 32bit template
     2                                  
     3                                  bits 32
     4                                  section .data
     5                                  ;variables with values go here
     6                                  	
     7 00000000 000000000000F03F        	floatVar1	dq	1.0
     8 00000008 0000000000000040        	floatVar2	dq	2.0
     9 00000010 DBF97E6ABC206C40        	floatVar3	dq	225.023
    10 00000018 1F85EB51B87E4040        	floatVar4	dq	32.99
    11 00000020 0000000000002440        	floatVar5	dq	10.0
    12                                  	
    13                                  	
    14                                  section .bss
    15                                  ;reserved memory goes here
    16 00000000 <res 00000008>          	floatStore	resq 1
    17                                  	
    18                                  
    19                                  section .text
    20                                  ;Your program code goes here
    21                                  
    22                                  	global _start
    23                                  _start:
    24 00000000 90                          nop
    25                                  	
    26                                  	;========== CODE ===========
    27                                  	
    28                                  	;floatVar1 + (floatVar2 * floatVar3)
    29                                  	
    30 00000001 DD05[08000000]          	fld	qword [floatVar2]						;push 2,0 onto the stack
    31 00000007 DD05[10000000]          	fld qword [floatVar3]						;push 225.023 onto the stack
    32 0000000D DEC9                    	fmul										;floatVar2 * floatVar3
    33 0000000F DD05[00000000]          	fld qword [floatVar1]						;push 1.0 onto the stack
    34 00000015 DEC1                    	fadd										;floatVar1 + (floatVar2 * floatVar3)
    35 00000017 DD05[18000000]          	fld qword [floatVar4]
    36 0000001D DEF9                    	fdiv
    37 0000001F DD1D[00000000]          	fstp qword [floatStore]						;store the result in the reserved variable
    38                                  	
    39 00000025 DD05[10000000]          	fld qword [floatVar3]						;push 225.023
    40 0000002B D9FA                    	fsqrt										;sqaure root it
    41                                  	;fld										; THIS WILL NOT take (ST(0)) and push it again to the FLU Stack
    42                                  	
    43                                  		;fmul									;Multiply it byitself (should reserve the sqrt)
    44 0000002D DC0D[08000000]          	fmul qword [floatVar2]					
    45                                  	
    46                                  	
    47 00000033 DC15[20000000]          	fcom qword [floatVar5]						;compare ST(0) with fv5 = 10
    48 00000039 7703                    	ja	ItsGreater								;If greater than 10- jump
    49 0000003B 90                      		nop										;It was less than 10
    50                                  		
    51                                  		
    52 0000003C EB01                    	jmp exitit
    53                                  	ItsGreater:
    54 0000003E 90                      		nop
    55                                  	
    56                                  	exitit:
    57                                  	
    58                                  	
    59 0000003F 90                      	nop
    60                                  	
    61                                  	;Do not remove/change the lines below here.
    62                                  	;These exit out of the application and back
    63                                  	;to linux in an orderly fashion
    64 00000040 90                      	nop
    65 00000041 B801000000              	mov eax,1      ; Exit system call value
    66 00000046 BB00000000              	mov ebx,0      ; Exit return code
    67 0000004B CD80                    	int 80h        ; Call the kernel
