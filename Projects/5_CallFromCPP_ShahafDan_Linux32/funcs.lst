     1                                  
     2                                  SECTION .data
     3                                  
     4                                  	
     5                                  
     6                                  ;------ GLOABLIZE FUNCSTION ----------
     7                                  
     8                                  global addTwoArrays
     9                                  global addTwo
    10                                  global multiplyTwo
    11                                  global pow2
    12                                  global addArray
    13                                  global revArray
    14                                  
    15                                  
    16                                  
    17                                  ;----- REVERSING AN ARRAY -----	
    18                                  revArray:
    19 00000000 90                      	nop
    20 00000001 8B742404                	mov esi, [esp + 4] ;array1
    21 00000005 8B7C2408                	mov edi, [esp + 8] ;array2
    22 00000009 8B4C240C                	mov ecx, [esp + 12] ;size of the arrays - should be the same for both array!
    23 0000000D B800000000              	mov eax, 0
    24 00000012 53                      	push ebx ;have to do this due to a bug in the system
    25                                  	L1: ;loop ecx times
    26 00000013 8B1C06                  		mov ebx, [esi + eax]
    27 00000016 895C8FFC                		mov [edi + ((ecx- 1 )* 4)], ebx
    28 0000001A 83C004                  		add eax, 4
    29 0000001D E2F4                    	loop L1
    30                                  	
    31 0000001F 89F8                    	mov eax, edi;move to eax to be returned, the array2 (reversed array1)
    32 00000021 5B                      	pop ebx;have to do this due to a bug in the system
    33 00000022 C3                      ret ;automatically will reture eax
    34                                  
    35                                  
    36                                  
    37                                  ;----- ADDING ARRAYS -----	
    38                                  addTwoArrays: 
    39 00000023 90                      	nop	
    40 00000024 8B742404                	mov esi, [esp + 4] ;mov to esi the pointer to the first array
    41 00000028 8B7C2408                	mov edi, [esp + 8] ;mov to edi the pointer to the second array
    42 0000002C 8B54240C                	mov edx, [esp + 12] ;mov to edx the third array
    43 00000030 8B4C2410                	mov ecx, [esp + 16];mov to the ecx the size of the array
    44 00000034 53                      	push ebx ;have to do this due to a bug
    45 00000035 BB00000000              	mov ebx, 0 ;use ebx as out counter, ebx = 0, increment by 4 (bytes) every loops
    46                                  	L:
    47 0000003A 8B041F                  		mov eax, [edi + ebx] ;put in the temp reg the current idexed value
    48 0000003D 89041A                  		mov [edx + ebx], eax ;from thet temp reg mov it to the empty array at the same index
    49                                  		
    50 00000040 8B041E                  		mov eax, [esi + ebx] ;;put in the temp reg the current idexed value
    51 00000043 01041A                  		add [edx + ebx], eax ;add that value to the same position in the sum array (3rd array)
    52 00000046 83C304                  		add ebx, 4 ;counter++
    53 00000049 E2EF                    	loop L
    54 0000004B 89D0                    	mov eax, edx
    55 0000004D 5B                      	pop ebx ;have to do this due a bug
    56 0000004E C3                      ret ;returns the final eax, therefore eax must inclue the third array
    57                                  
    58                                  
    59                                  ;----- ADDING TWO NUMBERS -----	
    60                                  addTwo:
    61 0000004F 90                      	nop
    62 00000050 8B442404                	mov eax, [esp + 4] ;mov to eax the first pointer to a parameter from the stack
    63 00000054 8B542408                	mov edx, [esp + 8] ;mov to edx the second one from the stack
    64 00000058 01D0                    	add eax, edx;eax = eax + edx
    65 0000005A C3                      ret ; return eax
    66                                  
    67                                  ;----- MULTIPLYING TWO NUMBERS -----	
    68                                  multiplyTwo:
    69 0000005B 90                      	nop
    70 0000005C 8B742404                	mov esi, [esp + 4] ;mov to esi the first pointer to a parameter
    71 00000060 8B542408                	mov edx, [esp + 8] ;mov to edi the second one
    72 00000064 89F0                    	mov eax, esi; mov x to eax
    73 00000066 F7E2                    	mul edx ;multiple eax (x) by y (edi)
    74 00000068 C3                      ret ;return eax (x*y)
    75                                  
    76                                  
    77                                  ;----- SQUARING A NUMBER -----	
    78                                  pow2:
    79 00000069 90                      	nop
    80 0000006A 8B442404                	mov eax, [esp + 4] ;copies the value from the stack to esi
    81 0000006E F7E0                    	mul eax
    82 00000070 C3                      ret ;always returns eax
    83                                  	
    84                                  	
    85                                  	
    86                                  ;----- ADDING ARRAY ELEMENTS -----	
    87                                  addArray:
    88                                  	;taken from the presentation
    89 00000071 90                      	nop 
    90 00000072 8B742404                	mov esi, [esp + 4] ;copy the first parameter to esi; pointer to an array
    91 00000076 8B4C2408                	mov ecx, [esp + 8]; copy second parameter to ecx; number of items in the array
    92 0000007A 53                      	push ebx ;needed when c++
    93 0000007B BB00000000              	mov ebx, 0 ;set counter to zero
    94 00000080 B800000000              	mov eax, 0 ;set total to zero
    95                                  	
    96                                  	Loop1:
    97 00000085 8B141E                  		mov edx, [esi + ebx] ;copy values in edx to eax
    98 00000088 01D0                    		add eax, edx ;add the array value in edx to eax
    99 0000008A 83C304                  		add ebx, 4 ;incremeny ebx by a double word size (4 bytes)
   100 0000008D E2F6                    	loop Loop1 ;ecx contrains the counter - decrementit and loop
   101 0000008F 5B                      	pop ebx ;needed when C++ calls assembler programs
   102 00000090 C3                      ret ;return
