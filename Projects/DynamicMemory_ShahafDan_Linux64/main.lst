     1                                  ;
     2                                  ;Example program to execute 64-bit functions in Linux
     3                                  ;
     4                                  
     5                                  ;
     6                                  ;Include our external functions library functions
     7                                  %include "./functions64.inc"
     1                              <1> ;
     2                              <1> ;Include file for the functions library
     3                              <1> ;
     4                              <1> 
     5                              <1> ;Print a string with an ending 00h delimiter to the console
     6                              <1> ;Stack Contents:
     7                              <1> ;	Address of the String (Stack)
     8                              <1> ;Example Usage:
     9                              <1> ;	push	stringVariable
    10                              <1> ;	call	PrintString
    11                              <1> ;
    12                              <1> extern		PrintString
    13                              <1> 
    14                              <1> ;Print a space to the console
    15                              <1> ;Stack Contents:
    16                              <1> ;	None
    17                              <1> ;Example Usage:
    18                              <1> ;	call	PrintSpace
    19                              <1> ;
    20                              <1> extern		PrintSpace
    21                              <1> 
    22                              <1> ;Print 'x' number of spaces
    23                              <1> ;Stack Contents:
    24                              <1> ;	the total spaces to print
    25                              <1> ;Example Usage:
    26                              <1> ;	push	DWORD 5
    27                              <1> ;	call	PrintSpaces
    28                              <1> ;
    29                              <1> extern		PrintSpaces
    30                              <1> 
    31                              <1> ;Print a comma to the console
    32                              <1> ;Stack Contents:
    33                              <1> ;	None
    34                              <1> ;Example Usage:
    35                              <1> ;	call	PrintComma
    36                              <1> ;
    37                              <1> extern		PrintComma
    38                              <1> 
    39                              <1> ;Print a new line to the console
    40                              <1> ;Stack Contents:
    41                              <1> ;	None
    42                              <1> ;Example Usage:
    43                              <1> ;	call	Printendl
    44                              <1> ;
    45                              <1> extern		Printendl
    46                              <1> 
    47                              <1> ;Print a string which is not null terminated
    48                              <1> ;Stack contents:
    49                              <1> ;	The Address of the string to print
    50                              <1> ;	The length of the string to print
    51                              <1> ;Example Usage:
    52                              <1> ;	push	stringVariable
    53                              <1> ;	push	stringVariable.len
    54                              <1> ;	call	PrintText
    55                              <1> ;
    56                              <1> extern		PrintText
    57                              <1> 
    58                              <1> ;Convert and then print a 64bit hex number
    59                              <1> ;Stack contents:
    60                              <1> ;	Value to Convert to an Ascii String
    61                              <1> ;Example Usage:
    62                              <1> ;	push	QWORD [quadWordVariable]
    63                              <1> ;	call	Print64bitNumHex
    64                              <1> ;
    65                              <1> extern		Print64bitNumHex
    66                              <1>    
    67                              <1> ;Convert and then print a 64bit octal number
    68                              <1> ;Stack contents:
    69                              <1> ;	Value to Convert to an Ascii String
    70                              <1> ;Example Usage:
    71                              <1> ;	push	QWORD [quadWordVariable]
    72                              <1> ;	call	Print64bitNumOctal
    73                              <1> ;
    74                              <1> extern		Print64bitNumOctal
    75                              <1> 
    76                              <1> ;Convert and then print a 64bit decimal number
    77                              <1> ;Stack contents:
    78                              <1> ;	Value to Convert to an Ascii String
    79                              <1> ;Example Usage:
    80                              <1> ;	push QWORD [quadwordvariable]
    81                              <1> ;	call	Print64bitNumDecimal
    82                              <1> ;
    83                              <1> extern		Print64bitNumDecimal
    84                              <1> 
    85                              <1> ;Convert and then print a signed 64bit decimal number
    86                              <1> ;Stack contents:
    87                              <1> ;	Value to Convert to an Ascii String
    88                              <1> ;Example Usage:
    89                              <1> ;	push QWORD [quadwordvariable]
    90                              <1> ;	call	Print64bitNumDecimal
    91                              <1> ;
    92                              <1> extern		Print64bitSNumDecimal
    93                              <1> 
    94                              <1> ;Convert and then print a 64bit binary number
    95                              <1> ;Stack contents:
    96                              <1> ;	Value to Convert to an Ascii String
    97                              <1> ;Example Usage:
    98                              <1> ;	push QWORD [quadwordvariable]
    99                              <1> ;	call	Print64bitNumBinary
   100                              <1> ;
   101                              <1> extern		Print64bitNumBinary
   102                              <1> 
   103                              <1> ;Print a full 64bit binary number including leading zeros
   104                              <1> ;Stack contents:
   105                              <1> ;	Value to Convert to an Ascii String
   106                              <1> ;Example Usage:
   107                              <1> ;	push QWORD [quadwordvariable]
   108                              <1> ;	call	Print64bitFullBinary
   109                              <1> ;
   110                              <1> extern		Print64bitFullBinary
   111                              <1> 
   112                              <1> ;This routine prints a string to the screen left justified
   113                              <1> ;Stack contents:
   114                              <1> ;	Address of the string [ebp + 16]
   115                              <1> ;	Number of characters it will be justified within [ebp + 24]
   116                              <1> ;Example Usage:
   117                              <1> ;	push	stringVariable
   118                              <1> ;	push	QWORD 80
   119                              <1> ;	call	PrintLeft
   120                              <1> ;
   121                              <1> extern		PrintLeft
   122                              <1> 
   123                              <1> ;This routine prints a string to the screen right justified
   124                              <1> ;Stack contents:
   125                              <1> ;	Address of the string [ebp + 16]
   126                              <1> ;	Number of characters it will be justified within [ebp + 24]
   127                              <1> ;Example Usage:
   128                              <1> ;	push	stringVariable
   129                              <1> ;	push	QWORD 80
   130                              <1> ;	call	PrintRight
   131                              <1> ;
   132                              <1> extern		PrintRight
   133                              <1> 
   134                              <1> ;This routine prints a string to the screen center justified
   135                              <1> ;Stack contents:
   136                              <1> ;	Address of the string [ebp + 16]
   137                              <1> ;	Number of characters it will be justified within [ebp + 24]
   138                              <1> ;Example Usage:
   139                              <1> ;	push	stringVariable
   140                              <1> ;	push	QWORD 80
   141                              <1> ;	call	PrintCenter
   142                              <1> ;
   143                              <1> extern		PrintCenter
   144                              <1> 
   145                              <1> ;Print all 64bit Registers to the screen
   146                              <1> ;Stack contents:
   147                              <1> ;	None
   148                              <1> ;Example Usage:
   149                              <1> ;	call	PrintRegisters
   150                              <1> ;
   151                              <1> extern		PrintRegisters
   152                              <1> 
   153                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   154                              <1> ;Stack Contents:
   155                              <1> ;	Address of keyboard buffer
   156                              <1> ;	Size of the keyboard buffer
   157                              <1> ;Return:
   158                              <1> ;	Rax will contain the number of characters the user input
   159                              <1> ;Example Usage:
   160                              <1> ;	push	readbuffer
   161                              <1> ;	push	readbuffer.len
   162                              <1> ;	call	ReadText
   163                              <1> extern		ReadText
   164                              <1> 
   165                              <1> ;Input UnSigned Int 
   166                              <1> ;This function will let the user input an integer returned into the RAX register
   167                              <1> ;Arguments: None
   168                              <1> ;Return: 	rax will contain the usigned ingeter
   169                              <1> ;			Carry flag will be set if invalid integer was input
   170                              <1> ;Example Usage:
   171                              <1> ;	call	InputInt
   172                              <1> ;	Note: eax will contain the value of the unsigned integer entered
   173                              <1> ;	jnc		validIntegerInput
   174                              <1> ;	Otherwise, an invalid integer was input
   175                              <1> extern		InputUInt
   176                              <1> 
   177                              <1> ;Input Signed Int 
   178                              <1> ;This function will let the user input a signed integer and put the value 
   179                              <1> ;into the RAX register.
   180                              <1> ;Arguments: None
   181                              <1> ;Return: 	eax will contain the usigned ingeter
   182                              <1> ;			Carry flag will be set if invalid integer was input
   183                              <1> ;Example Usage:
   184                              <1> ;	call	InputSInt
   185                              <1> ;	Note: eax will contain the value of the signed integer entered
   186                              <1> ;	jnc		validIntegerInput
   187                              <1> ;	Otherwise, an invalid integer was input
   188                              <1> extern		InputSInt
   189                              <1> 
   190                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   191                              <1> ;Stack Contents:
   192                              <1> ;	Address of the string to print
   193                              <1> ;	Address of keyboard buffer
   194                              <1> ;	Size of the keyboard buffer
   195                              <1> ;Return:
   196                              <1> ;	Rax will contain the number of characters input
   197                              <1> ;Example Usage:
   198                              <1> ;	push	inputPromptVariable
   199                              <1> ;	push	keyboardBufferVariable
   200                              <1> ;	push	keyboardBufferVariable.len  ;This is the maximum size of the buffer
   201                              <1> ;	call	ReadTextWPrompt
   202                              <1> extern		ReadTextWPrompt
   203                              <1> 
   204                              <1> ;Print a Quad-word floating point number
   205                              <1> ;Stack Contents:
   206                              <1> ;	The floating point number to print
   207                              <1> ;Return:
   208                              <1> ;	None
   209                              <1> ;Example Usage:
   210                              <1> ;	push	numberToPrint
   211                              <1> ;	push	[fractionalDigits]
   212                              <1> ;	call	PrintQWFloat
   213                              <1> extern		PrintQWFloat
   214                              <1> 
   215                              <1> ;Print a Double-word floating point number with scientific notation
   216                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   217                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   218                              <1> ;	much easier and shorter algorithm
   219                              <1> ;Stack Contents:
   220                              <1> ;	The floating point number to print
   221                              <1> ;Return:
   222                              <1> ;	None
   223                              <1> ;Example Usage:
   224                              <1> ;	push	[numberToPrint]
   225                              <1> ;	push	[fractionalDigits]
   226                              <1> ;	call	PrintQWFloatSN
   227                              <1> extern		PrintQWFloatSN
   228                              <1> 
   229                              <1> ;Input a Floating Point Number	
   230                              <1> ;This function will let the user input a string, then it will check it to make sure it
   231                              <1> ;is a valid floating point number.  It will then convert the ASCII string into a QWORD 
   232                              <1> ;and return that value in the RAX register.
   233                              <1> ;Stack Contents:
   234                              <1> ;	None
   235                              <1> ;Return: 	RAX and ST(0) will contain the number
   236                              <1> ;			Carry flag will be set if invalid binary number was input
   237                              <1> ;Example Usage:
   238                              <1> ;	call	InputFloat
   239                              <1> ;	jnc		ValidFloatLabel
   240                              <1> ;	otherwise, a problem occured - print an error message
   241                              <1> extern		InputFloat
   242                              <1> 	
   243                              <1> ;Input Binary Number
   244                              <1> ;This function will let the user input a string, then it will check it to make sure it
   245                              <1> ;is a binary string.  It will then convert the ASCII string into a DWORD and return
   246                              <1> ;that value in the RAX register.
   247                              <1> ;Arguments: 
   248                              <1> ;	None
   249                              <1> ;Return: 	rax will contain the numeric binary value
   250                              <1> ;			Carry flag will be set if invalid binary number was input
   251                              <1> ;Example Usage:
   252                              <1> ;	call	InputBin
   253                              <1> ;	jnc		ValidBinLabel
   254                              <1> ;	otherwise, a problem occured - print an error message
   255                              <1> extern		InputBin
   256                              <1> 
   257                              <1> ;This function will let the user input a string, then it will check it to make sure it
   258                              <1> ;is a hexidecimal string.  It will then convert the ASCII string into a DWORD and return
   259                              <1> ;that value in the EAX register.
   260                              <1> ;Arguments: 
   261                              <1> ;	None
   262                              <1> ;Return: 	rax will contain the numeric hexidecimal value
   263                              <1> ;			Carry flag will be set if invalid hex number was input
   264                              <1> ;Example Usage:
   265                              <1> ;	call	InputHex
   266                              <1> ;	jnc		ValidHexLabel
   267                              <1> ;	otherwise, a problem occured - print an error message
   268                              <1> extern		InputHex
   269                              <1> 
   270                              <1> ;Print all of the floating point registers ST0 - ST7
   271                              <1> ;Stack Contents:
   272                              <1> ;	None
   273                              <1> ;Return: 	None
   274                              <1> ;Example Usage:
   275                              <1> ;	call	PrintFloatingRegisters
   276                              <1> extern		PrintFloatingRegisters
   277                              <1> 
   278                              <1> ;Print a 64-bit floating point number
   279                              <1> ;Stack Contents:
   280                              <1> ;	The floating point number
   281                              <1> ;Return: 	None
   282                              <1> ;Example Usage:
   283                              <1> ;	call	Print64bitFloatBinary
   284                              <1> extern		Print64bitFloatBinary
   285                              <1> 
   286                              <1> ;Set the carry flag if the floating poing number pushed onto the Stack
   287                              <1> ;is a +NAN, -NAN, +Infinity or -Infinity
   288                              <1> ;Stack Contents:
   289                              <1> ; QWORD Floating Point number (Stack)
   290                              <1> ;Return: Carry Flag Set if NAN, Clear if OK
   291                              <1> ;Example Usage
   292                              <1> ;   push  QWORD [floatingVariable]
   293                              <1> ;   call  IsNAN
   294                              <1> extern		IsNAN
   295                              <1> 
   296                              <1> ;Clears the keyboard buffer until \n or null are encountered
   297                              <1> ;Stack contents:
   298                              <1> ;	None
   299                              <1> ;Example Usage:
   300                              <1> ;	call	ClearKBuffer
   301                              <1> ;
   302                              <1> extern		ClearKBuffer
   303                              <1> 
   304                              <1> ;An Internal function used to get the system time in hours
   305                              <1> ;Stack Contents:
   306                              <1> ; None
   307                              <1> ;Return: RAX will have the current Hour
   308                              <1> ;Example Usage
   309                              <1> ;	call	GetCurrentHour
   310                              <1> extern		GetCurrentHour
   311                              <1> 
   312                              <1> ;An Internal function used to get the system time in minutes
   313                              <1> ;Stack Contents:
   314                              <1> ; None
   315                              <1> ;Return: RAX will have the current minute
   316                              <1> ;Example Usage
   317                              <1> ;	call	GetCurrentMinute
   318                              <1> extern		GetCurrentMinute
   319                              <1> 
   320                              <1> ;An Internal function used to get the system time in seconds
   321                              <1> ;Stack Contents:
   322                              <1> ; None
   323                              <1> ;Return: RAX will have the current seconds
   324                              <1> ;Example Usage
   325                              <1> ;	call	GetCurrentSecond
   326                              <1> extern		GetCurrentSecond
   327                              <1> 
   328                              <1> ;An Internal function used to get the system year
   329                              <1> ;Stack Contents:
   330                              <1> ; None
   331                              <1> ;Return: RAX will have the current year
   332                              <1> ;Example Usage
   333                              <1> ;	call	GetCurrentYear
   334                              <1> extern		GetCurrentYear
   335                              <1> 
   336                              <1> ;An Internal function used to get the system month
   337                              <1> ;Stack Contents:
   338                              <1> ; None
   339                              <1> ;Return: RAX will have the current month
   340                              <1> ;Example Usage
   341                              <1> ;	call	GetCurrentMonth
   342                              <1> extern		GetCurrentMonth
   343                              <1> 
   344                              <1> ;An Internal function used to get the system day
   345                              <1> ;Stack Contents:
   346                              <1> ; None
   347                              <1> ;Return: RAX will have the current day
   348                              <1> ;Example Usage
   349                              <1> ;	call	GetCurrentDay
   350                              <1> extern		GetCurrentDay
   351                              <1> 
   352                              <1> ;An Internal function used to get the system time hours, minutes, seconds
   353                              <1> ;Stack Contents:
   354                              <1> ; None
   355                              <1> ;Return: None
   356                              <1> ;Example Usage
   357                              <1> ;   call GetSystemTime
   358                              <1> extern		GetSystemTime
   359                              <1> 
   360                              <1> ;Print the time in the format hh:mm:ss
   361                              <1> ;Stack Contents:
   362                              <1> ; None
   363                              <1> ;Return: None
   364                              <1> ;Example Usage
   365                              <1> ;   call PrintSystemTime
   366                              <1> extern		PrintSystemTime
   367                              <1> 
   368                              <1> ;Print the date in the format mm/dd/yyyy
   369                              <1> ;Stack Contents:
   370                              <1> ; None
   371                              <1> ;Return: None
   372                              <1> ;Example Usage
   373                              <1> ;   call PrintSystemDateEng
   374                              <1> extern		PrintSystemDateEng
   375                              <1> 
   376                              <1> ;Print the date in the format yyyy/mm/dd
   377                              <1> ;Stack Contents:
   378                              <1> ; None
   379                              <1> ;Return: None
   380                              <1> ;Example Usage
   381                              <1> ;   call PrintSystemDateEuro
   382                              <1> extern		PrintSystemDateEuro
   383                              <1> 
   384                              <1> ;Convert and then return in a byte array a64-but number in decimal format
   385                              <1> ;Stack contents:
   386                              <1> ;	Value to Convert to an Ascii String
   387                              <1> ;	Address of byte array to contain the result
   388                              <1> ;Return Value:
   389                              <1> ;	rax = Number of characters returned
   390                              <1> ;Example Usage:
   391                              <1> ;	push 	QWORD [quadwordvariable]
   392                              <1> ;	push 	stringbuffer
   393                              <1> ;	call	ToString64bitNumDecimal
   394                              <1> ;
   395                              <1> extern		ToString64bitNumDecimal
   396                              <1> 
   397                              <1> ;Convert and then return in a byte array a 64bit signed number in decimal format
   398                              <1> ;Stack contents:
   399                              <1> ;	Value to Convert to an Ascii String
   400                              <1> ;	Address of byte array to contain the result
   401                              <1> ;Return Value:
   402                              <1> ;	rax = Number of characters returned
   403                              <1> ;Example Usage:
   404                              <1> ;	push 	QWORD [quadwordvariable]
   405                              <1> ;	push 	stringbuffer
   406                              <1> ;	call	ToString64bitSNumDecimal
   407                              <1> ;
   408                              <1> extern		ToString64bitSNumDecimal
   409                              <1> 
   410                              <1> ;Get the system date in English format and return to the calling function in th array
   411                              <1> ;	provided
   412                              <1> ;Stack contents:
   413                              <1> ;	Address of byte array to contain the result
   414                              <1> ;Return Value:
   415                              <1> ;	rax = Number of characters returned
   416                              <1> ;Example Usage:
   417                              <1> ;	push 	stringbuffer
   418                              <1> ;	call	GetEngDateString
   419                              <1> ;
   420                              <1> extern		GetEngDateString
   421                              <1> 
   422                              <1> ;Get the system date in European format and return to the calling function in th array
   423                              <1> ;	provided
   424                              <1> ;Stack contents:
   425                              <1> ;	Address of byte array to contain the result
   426                              <1> ;Return Value:
   427                              <1> ;	rax = Number of characters returned
   428                              <1> ;Example Usage:
   429                              <1> ;	push 	stringbuffer
   430                              <1> ;	call	GetEuroDateString
   431                              <1> ;
   432                              <1> extern		GetEuroDateString
   433                              <1> 
   434                              <1> ;Get the system time and return to the calling function in th array
   435                              <1> ;	provided
   436                              <1> ;Stack contents:
   437                              <1> ;	Address of byte array to contain the result
   438                              <1> ;Return Value:
   439                              <1> ;	rax = Number of characters returned
   440                              <1> ;Example Usage:
   441                              <1> ;	push 	stringbuffer
   442                              <1> ;	call	GetTimeString
   443                              <1> ;
   444                              <1> extern		GetTimeString
   445                              <1> 
   446                              <1> 
   447                              <1> ;Get a random number from the CPU
   448                              <1> ;Stack contents:
   449                              <1> ;	The maximum value of the random number
   450                              <1> ;	Signed = 1, Unsigned = 0
   451                              <1> ;Return Value:
   452                              <1> ;	rax = Random number value
   453                              <1> ;Example Usage:
   454                              <1> ;	push 	QWORD 200			;Will create a random number no greater than 200
   455                              <1> ;	push	QWORD 1				;1 = signed, 0 = uinsigned
   456                              <1> ;	call	GetRandomInt
   457                              <1> ;
   458                              <1> extern		GetRandomInt
   459                              <1> 
   460                              <1> ;Calculate the Variance from an array of numbers
   461                              <1> ;Stack contents:
   462                              <1> ;	Address of sample array of Quad words
   463                              <1> ;	The number of samples to process
   464                              <1> ;Return Value:
   465                              <1> ;	rax = Calculated Variance
   466                              <1> ;Example Usage:
   467                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   468                              <1> ;	push	10					;process 10 of the numbers in the array
   469                              <1> ;	call	CalcVariance
   470                              <1> ;
   471                              <1> extern		CalcVariance
   472                              <1> 
   473                              <1> ;Calculate the Standard Deviation from an array of numbers
   474                              <1> ;Stack contents:
   475                              <1> ;	Address of sample array of Quad words
   476                              <1> ;	The number of samples to process
   477                              <1> ;Return Value:
   478                              <1> ;	rax = Calculated Standard Deviation
   479                              <1> ;Example Usage:
   480                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   481                              <1> ;	push	10					;process 10 of the numbers in the array
   482                              <1> ;	call	CalcStdDev
   483                              <1> ;
   484                              <1> extern		CalcStdDev
   485                              <1> 
   486                              <1> ;Calculate the Mean from an array of numbers
   487                              <1> ;Stack contents:
   488                              <1> ;	Address of sample array of Quad words
   489                              <1> ;	The number of samples to process
   490                              <1> ;Return Value:
   491                              <1> ;	rax = Calculated Mean
   492                              <1> ;Example Usage:
   493                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   494                              <1> ;	push	10					;process 10 of the numbers in the array
   495                              <1> ;	call	CalcMean
   496                              <1> ;
   497                              <1> extern		CalcMean
   498                              <1> 
   499                              <1> ;Fills an array with random quad values
   500                              <1> ;Stack contents:
   501                              <1> ;	Address of array of Quad words
   502                              <1> ;	The number of samples to process
   503                              <1> ;	Maximum value of the random number(s)
   504                              <1> ;	Signed = 1, Unsigned = 0
   505                              <1> ;Return Value:
   506                              <1> ;	Nothing
   507                              <1> ;Example Usage:
   508                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   509                              <1> ;	push	10					;process 10 of the numbers in the array
   510                              <1> ;	push	500					;The maximum random value should be 500
   511                              <1> ;	push	0					;Unsigned only
   512                              <1> ;	call	RandomArray
   513                              <1> ;
   514                              <1> extern		RandomArray
     8                                   
     9                                  SECTION .data
    10                                  	; put your variables below
    11 00000000 3D3D3D3D3D3D3D3D3D-     	lineAct db "===============================", 0ah ,0dh, 0h
    11 00000009 3D3D3D3D3D3D3D3D3D-
    11 00000012 3D3D3D3D3D3D3D3D3D-
    11 0000001B 3D3D3D3D0A0D00     
    12 00000022 48656C6C6F20576F72-     	welcomeAct db "Hello World, Assignment #11", 0ah, 0dh, 0h 
    12 0000002B 6C642C204173736967-
    12 00000034 6E6D656E7420233131-
    12 0000003D 0A0D00             
    13 00000040 4279652C2068617665-     	byeAct db "Bye, have a good one", 0ah, 0dh, 0h
    13 00000049 206120676F6F64206F-
    13 00000052 6E650A0D00         
    14 00000057 596F75206861766520-     	moreArgsAct db "You have entered too many arguments, Please call the program again", 0ah, 0dh, 0h
    14 00000060 656E74657265642074-
    14 00000069 6F6F206D616E792061-
    14 00000072 7267756D656E74732C-
    14 0000007B 20506C656173652063-
    14 00000084 616C6C207468652070-
    14 0000008D 726F6772616D206167-
    14 00000096 61696E0A0D00       
    15 0000009C 596F75206861766520-     	lessArgsAct db "You have not entered enough arguments, Please call the program again", 0ah, 0dh, 0h
    15 000000A5 6E6F7420656E746572-
    15 000000AE 656420656E6F756768-
    15 000000B7 20617267756D656E74-
    15 000000C0 732C20506C65617365-
    15 000000C9 2063616C6C20746865-
    15 000000D2 2070726F6772616D20-
    15 000000DB 616761696E0A0D00   
    16 000000E3 476F6F642C20796F75-     	goodArgsAct db "Good, you entered only 2 parameters", 0ah, 0dh, 0h
    16 000000EC 20656E746572656420-
    16 000000F5 6F6E6C792032207061-
    16 000000FE 72616D65746572730A-
    16 00000107 0D00               
    17 00000109 436F756C64206E6F74-     	failedFileAct	db	"Could not open the file, ending program.", 0ah, 0dh, 0h
    17 00000112 206F70656E20746865-
    17 0000011B 2066696C652C20656E-
    17 00000124 64696E672070726F67-
    17 0000012D 72616D2E0A0D00     
    18 00000134 53756363657366756C-     	successInputFile db 	"Succesfully opened the input file", 0ah, 0dh, 0h
    18 0000013D 6C79206F70656E6564-
    18 00000146 2074686520696E7075-
    18 0000014F 742066696C650A0D00 
    19 00000158 53756363657366756C-     	successOutputFile db 	"Succesfully opened the output file", 0ah, 0dh, 0h
    19 00000161 6C79206F70656E6564-
    19 0000016A 20746865206F757470-
    19 00000173 75742066696C650A0D-
    19 0000017C 00                 
    20 0000017D 0A0D00                  	endl db	0ah, 0dh, 0h
    21                                  		.len equ ($ - endl)
    22 00000180 436F7079696E672046-     	programActionAct	db	"Copying From the Source ", 0h
    22 00000189 726F6D207468652053-
    22 00000192 6F757263652000     
    23 00000199 2C20746F2074686520-     	programActionAct2	db	", to the destination ", 0h
    23 000001A2 64657374696E617469-
    23 000001AB 6F6E2000           
    24                                  
    25                                  
    26                                  SECTION .bss
    27                                  	;reserve memory here
    28 00000000 <res 000000FF>          	inputFileAddress	resb 	255
    29 000000FF <res 000000FF>          	outputFileAddress	resb 	255
    30 000001FE <res 00000001>          	numArgs 			resb 	1				; reserve one byte for how many variable are entered to main
    31 000001FF <res 00000008>          	argument			resq		1
    32 00000207 <res 00000078>          	totalBytes			resq	15
    33                                  	
    34                                  	
    35                                  	
    36                                  	
    37                                  	
    38                                  SECTION     .text
    39                                  	global  _start
    40                                       
    41                                  _start:
    42                                  	;code goes here
    43                                  	
    44                                  	;=============== WELCOME MESSAGE ================
    45 00000000 E8(00000000)            	call Printendl
    46 00000005 68[00000000]            	push lineAct
    47 0000000A E8(00000000)            	call PrintString
    48 0000000F 68[22000000]            	push welcomeAct
    49 00000014 E8(00000000)            	call PrintString 
    50 00000019 E8(00000000)            	call Printendl
    51                                  	
    52                                  	
    53                                  	;================== ASSIGNMENT ===========================
    54                                  	;-------- PART 1)  get address from the command line ------------
    55 0000001E 58                      	pop rax											;put the number of arguments its rax
    56 0000001F 48890425[FE010000]      	mov [numArgs], rax								;save it in numArgs
    57 00000027 4883E801                	sub rax, 1
    58 0000002B 4883F802                	cmp rax, 2										;compare it to 2 arguments
    59 0000002F 7C18                    	jl lessArgs
    60 00000031 7F02                    	jg moreArgs
    61 00000033 7428                    	je goodNumberArgs
    62                                  	
    63                                  	moreArgs:
    64 00000035 68[57000000]            	push moreArgsAct
    65 0000003A E8(00000000)            	call PrintString
    66 0000003F E8(00000000)            	call Printendl
    67 00000044 E9ED000000              	jmp Exit
    68                                  	
    69                                  	lessArgs:
    70 00000049 68[9C000000]            	push lessArgsAct
    71 0000004E E8(00000000)            	call PrintString
    72 00000053 E8(00000000)            	call Printendl
    73 00000058 E9D9000000              	jmp Exit
    74                                  	
    75                                  	goodNumberArgs:									;the number of arguments pass is two which is okay
    76 0000005D 68[E3000000]            	push goodArgsAct
    77 00000062 E8(00000000)            	call PrintString
    78 00000067 E8(00000000)            	call Printendl
    79                                  	
    80 0000006C 58                      	pop rax											; so it will now hold the address of the main program entirely, pop twice
    81 0000006D 58                      	pop rax											;rax will now store in the inputFile data
    82 0000006E 48890425[00000000]      	mov [inputFileAddress], rax
    83 00000076 58                      	pop rax
    84 00000077 48890425[FF000000]      	mov [outputFileAddress], rax					;move into a variance the address of the output file
    85 0000007F B800000000              	mov rax, 0										;clear the rax register
    86                                  	
    87                                  	;-------------------- PART 2) open inputFile ------------------
    88 00000084 B805000000              	mov rax, 5h										;open for read
    89 00000089 488B1C25[00000000]      	mov rbx, [inputFileAddress]						;the nam of the file
    90 00000091 B900000000              	mov rcx, 0h										;Read only
    91 00000096 CD80                    	int 80h											;Tickle the Kernel
    92 00000098 7368                    	jnc	failedOpening								;if error opening the file, carry flag is turned on
    93 0000009A 68[34010000]            	push successInputFile
    94 0000009F E8(00000000)            	call PrintString
    95                                  	
    96                                  	
    97                                  	;-------------------- PART 3) open outputFile ------------------
    98 000000A4 B808000000              	mov rax, 8h										;open for write
    99 000000A9 48BB-                   	mov rbx, outputFileAddress						;the nam of the file
    99 000000AB [FF00000000000000] 
   100 000000B3 B9B6010000              	mov rcx, 1b6h										;Read only
   101 000000B8 CD80                    	int 80h											;Tickle the Kernel
   102 000000BA 7346                    	jnc	failedOpening								;if error opening the file, carry flag is turned on
   103 000000BC 68[58010000]            	push successOutputFile
   104 000000C1 E8(00000000)            	call PrintString
   105                                  	
   106                                  	;------------------- PART 4) notify the user of the action ---------------
   107 000000C6 68[80010000]            	push programActionAct							;push display
   108 000000CB E8(00000000)            	call PrintString								;display
   109 000000D0 488B0425[00000000]      	mov rax, [inputFileAddress]						;prepare to print the name of the input file
   110 000000D8 50                      	push rax										;push it
   111 000000D9 E8(00000000)            	call PrintString								;display it
   112 000000DE 68[99010000]            	push programActionAct2							;push continous display
   113 000000E3 E8(00000000)            	call PrintString								;display
   114 000000E8 B800000000              	mov rax, 0										;clear it just in case
   115 000000ED 488B0425[FF000000]      	mov rax, [outputFileAddress]					;prepare to print the name of the output file
   116 000000F5 50                      	push rax										;push it
   117 000000F6 E8(00000000)            	call PrintString								; print it
   118 000000FB E8(00000000)            	call Printendl									;Empty line
   119                                  	
   120                                  	;----------------- PART 5) Dynamically allocate 0ffffh bytes ------------
   121                                  	
   122                                  	
   123                                  	
   124                                  	
   125                                  	
   126                                  	
   127                                  	;----------------- Failed Opening File ---------------
   128 00000100 EB34                    	jmp Exit
   129                                  	failedOpening:
   130 00000102 68[09010000]            		push failedFileAct
   131 00000107 E8(00000000)            		call PrintString
   132 0000010C E8(00000000)            		call Printendl
   133 00000111 EB23                    	jmp Exit
   134                                  	
   135                                  	;=================== GOODBYE MESSAGE =====================
   136 00000113 E8(00000000)            	call Printendl
   137 00000118 68[40000000]            	push byeAct
   138 0000011D E8(00000000)            	call PrintString
   139 00000122 E8(00000000)            	call Printendl
   140 00000127 68[00000000]            	push lineAct
   141 0000012C E8(00000000)            	call PrintString
   142 00000131 E8(00000000)            	call Printendl
   143                                  
   144                                  ;
   145                                  ;Setup the registers for exit and poke the kernel
   146                                  ;Exit: 
   147                                  Exit:
   148 00000136 B83C000000              	mov		rax, 60					;60 = system exit
   149 0000013B BF00000000              	mov		rdi, 0					;0 = return code
   150 00000140 0F05                    	syscall							;Poke the kernel
   151                                  
   152                                  
   153                                  ;=================== TO DO LIST ======================
   154                                  
   155                                  
   156                                  
