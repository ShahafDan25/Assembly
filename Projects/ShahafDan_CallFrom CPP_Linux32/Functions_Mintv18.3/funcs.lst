     1                                  
     2                                  SECTION .data
     3                                  
     4                                  	
     5                                  
     6                                  ;------ GLOABLIZE FUNCSTION ----------
     7                                  
     8                                  global addTwoArrays
     9                                  global addTwo
    10                                  global multiplyTwo
    11                                  global pow2
    12                                  global addArray
    13                                  global revArray
    14                                  
    15                                  
    16                                  
    17                                  ;----- REVERSING AN ARRAY -----	
    18                                  revArray:
    19 00000000 90                      	nop
    20 00000001 8B742404                	mov esi, [esp + 4] ;array1
    21 00000005 8B7C2408                	mov edi, [esp + 8] ;array2
    22 00000009 8B4C240C                	mov ecx, [esp + 12] ;size of the arrays - should be the same!
    23 0000000D B800000000              	mov eax, 0
    24 00000012 53                      	push ebx
    25                                  	L1: ;loop ecx times
    26 00000013 8B1C06                  		mov ebx, [esi + eax]
    27 00000016 895C8FFC                		mov [edi + ((ecx- 1 )* 4)], ebx
    28 0000001A 83C004                  		add eax, 4
    29 0000001D E2F4                    	loop L1
    30                                  	
    31 0000001F 89F8                    	mov eax, edi;move to eax to be returned, the array2 (reversed array1)
    32 00000021 5B                      	pop ebx
    33 00000022 C3                      ret ;automatically will reture eax
    34                                  
    35                                  
    36                                  
    37                                  ;----- ADDING ARRAYS -----	
    38                                  addTwoArrays: 
    39 00000023 90                      	nop	
    40 00000024 8B742404                	mov esi, [esp + 4] ;mov to esi the pointer to the first array
    41 00000028 8B7C2408                	mov edi, [esp + 8] ;mov to edi the pointer to the second array
    42 0000002C 8B4C240C                	mov ecx, [esp + 12];mov to the ecx the size of the array
    43 00000030 BA00000000              	mov edx, 0 ;use ebx as out counter, ebx = 0, increment by 4 (bytes) every loops
    44                                  	L:
    45 00000035 8B0417                  		mov eax, [edi + edx]
    46 00000038 010416                  		add [esi + edx], eax
    47 0000003B 83C204                  		add edx, 4 ;counter++
    48 0000003E E2F5                    	loop L
    49 00000040 89F0                    	mov eax, esi
    50 00000042 C3                      ret ;returns the final eax, therefore eax must inclue the third array
    51                                  
    52                                  
    53                                  ;----- ADDING TWO NUMBERS -----	
    54                                  addTwo:
    55 00000043 90                      	nop
    56 00000044 8B442404                	mov eax, [esp + 4] ;mov to eax the first pointer to a parameter from the stack
    57 00000048 8B542408                	mov edx, [esp + 8] ;mov to edx the second one from the stack
    58 0000004C 01D0                    	add eax, edx;eax = eax + edx
    59 0000004E C3                      ret ; return eax
    60                                  
    61                                  ;----- MULTIPLYING TWO NUMBERS -----	
    62                                  multiplyTwo:
    63 0000004F 90                      	nop
    64 00000050 8B742404                	mov esi, [esp + 4] ;mov to esi the first pointer to a parameter
    65 00000054 8B542408                	mov edx, [esp + 8] ;mov to edi the second one
    66 00000058 89F0                    	mov eax, esi; mov x to eax
    67 0000005A F7E2                    	mul edx ;multiple eax (x) by y (edi)
    68 0000005C C3                      ret ;return eax (x*y)
    69                                  
    70                                  
    71                                  ;----- SQUARING A NUMBER -----	
    72                                  pow2:
    73 0000005D 90                      	nop
    74 0000005E 8B442404                	mov eax, [esp + 4] ;copies the value from the stack to esi
    75 00000062 F7E0                    	mul eax
    76 00000064 C3                      ret ;always returns eax
    77                                  	
    78                                  	
    79                                  	
    80                                  ;----- ADDING ARRAY ELEMENTS -----	
    81                                  addArray:
    82                                  	;taken from the presentation
    83 00000065 90                      	nop 
    84 00000066 8B742404                	mov esi, [esp + 4] ;copy the first parameter to esi; pointer to an array
    85 0000006A 8B4C2408                	mov ecx, [esp + 8]; copy second parameter to ecx; number of items in the array
    86 0000006E 53                      	push ebx ;needed when c++
    87 0000006F BB00000000              	mov ebx, 0 ;set counter to zero
    88 00000074 B800000000              	mov eax, 0 ;set total to zero
    89                                  	
    90                                  	Loop1:
    91 00000079 8B141E                  		mov edx, [esi + ebx] ;copy values in edx to eax
    92 0000007C 01D0                    		add eax, edx ;add the array value in edx to eax
    93 0000007E 83C304                  		add ebx, 4 ;incremeny ebx by a double word size (4 bytes)
    94 00000081 E2F6                    	loop Loop1 ;ecx contrains the counter - decrementit and loop
    95 00000083 5B                      	pop ebx ;needed when C++ calls assembler programs
    96 00000084 C3                      ret ;return
