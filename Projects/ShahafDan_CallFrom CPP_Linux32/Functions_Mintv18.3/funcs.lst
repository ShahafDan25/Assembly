     1                                  
     2                                  SECTION .data
     3 00000000 0D0A00                  	szLF db 0dh, 0ah, 0h
     4 00000003 00                      	stdin db 0h
     5 00000004 03                      	sys_read db 03h
     6                                  	
     7                                  
     8                                  global DisplayText
     9                                  global Displayendl
    10                                  global revArray
    11                                  global ReadText
    12                                  global addTwoArrays
    13                                  global addTwo
    14                                  global multiplyTwo
    15                                  global pow2
    16                                  global addArray
    17                                  
    18                                  DisplayText:
    19 00000005 B804000000              	mov eax, 04h ;we are goin to write something
    20 0000000A BB01000000              	mov ebx, 01h ;determine what are we writing to
    21 0000000F CD80                    	int 80h ;Tickle/Poke the Kernel
    22 00000011 C3                      ret ;finish the function, return 
    23                                  
    24                                  Displayendl: ;the function imply prints the carriage return and new ilne string
    25 00000012 B9[00000000]            	mov ecx, szLF ;mov the address of the characters to the ecx reg
    26 00000017 BA03000000              	mov edx, 03h ;move the length of the character arrays to edx
    27 0000001C B804000000              	mov eax, 04h ;we are goin to write something
    28 00000021 BB01000000              	mov ebx, 01h ;determine what are we writing to
    29 00000026 CD80                    	int 80h ;tickle the kernel
    30 00000028 C3                      ret 
    31                                  
    32                                  ReadText:
    33 00000029 BA[03000000]            	mov edx, stdin ; we are going to READ 
    34                                  	;sys_read equ 03h
    35                                  	;stdin equ 0h
    36 0000002E B8[04000000]            	mov eax, sys_read ;what are we going to read from
    37 00000033 CD80                    	int 80h ;poke the kernel
    38 00000035 C3                      ret
    39                                  
    40                                  revArray:
    41                                  	;put functions code here
    42 00000036 8B5C2404                	mov ebx, [esp + 4] ;mov to ebx the pointer to the first array
    43 0000003A 8B442408                	mov eax, [esp + 8] ;mov to ecx the pointer to the second array
    44 0000003E BE00000000              	mov esi, 0 ;counter to take out elements from array 1
    45 00000043 8B4C240C                	mov ecx, [esp + 12] ;mov to ecx the amount of items in both arrays
    46 00000047 89CF                    	mov edi, ecx ;counter to placein array2
    47 00000049 83EF01                  	sub edi, 1 ;edi = size - 1
    48                                  	;push ebx ;not sure if I need this
    49 0000004C BB00000000              	mov ebx, 0;clear ebx and eax just in case
    50 00000051 B800000000              	mov eax, 0
    51                                  	
    52                                  	;ecx will server us as out counter
    53                                  	revLoop:
    54 00000056 8B0433                  		mov eax, [ebx + esi]
    55 00000059 50                      		push eax
    56 0000005A 83C604                  		add esi, 4
    57 0000005D 83EF04                  		sub edi, 4
    58 00000060 E2F4                    	loop revLoop
    59 00000062 5B                      	pop ebx
    60 00000063 C3                      ret ;automatically will reture eax
    61                                  
    62                                  addTwoArrays: ;??? very confused on how to do this one
    63 00000064 8B5C2404                	mov ebx, [esp + 4] ; move to ebx the pointer to the first array
    64 00000068 8B4C2408                	mov ecx, [esp + 8] ;move to ecx the number of utems in the array
    65 0000006C 8B54240C                	mov edx, [esp + 12] ;move to edx the pointer to the second array
    66                                  	;coming from the assumption that the length of both arrays (1 and 2) in the same
    67 00000070 89CE                    	mov esi, ecx
    68 00000072 83EE01                  	sub esi, 1 ;set counter2 to size - 1
    69 00000075 BF00000000              	mov edi, 0;use edi as counter
    70                                  	addArraysLoop:
    71 0000007A 89D8                    		mov eax, ebx
    72 0000007C 50                      		push eax ;stack of eax to move forward
    73                                  	
    74 0000007D 47                      		inc edi;counter1 ++;
    75 0000007E 4E                      		dec esi ;counter2--;
    76 0000007F E2F9                    	loop addArraysLoop
    77                                  	
    78 00000081 C3                      ret ;returns the final eax, therefore eax must inclue the third array
    79                                  
    80                                  addTwo:
    81 00000082 8B442404                	mov eax, [esp + 4] ;mov to eax the first pointer to a parameter from the stack
    82 00000086 8B542408                	mov edx, [esp + 8] ;mov to edx the second one from the stack
    83 0000008A 01D0                    	add eax, edx;eax = eax + edx
    84 0000008C C3                      ret ; return eax
    85                                  
    86                                  multiplyTwo:
    87 0000008D 8B742404                	mov esi, [esp + 4] ;mov to esi the first pointer to a parameter
    88 00000091 8B542408                	mov edx, [esp + 8] ;mov to edi the second one
    89 00000095 89F0                    	mov eax, esi; mov x to eax
    90 00000097 F7E2                    	mul edx ;multiple eax (x) by y (edi)
    91 00000099 C3                      ret ;return eax (x*y)
    92                                  
    93                                  pow2:
    94 0000009A 8B742404                	mov esi, [esp + 4] ;copies the value from the stack to esi
    95 0000009E 89F0                    	mov eax, esi ;will return eax later at ret
    96 000000A0 89F1                    	mov ecx, esi ;multiple eax by esi, esi times
    97                                  	PowLoop:
    98 000000A2 F7E6                    		mul esi ;multiple eax by esi
    99 000000A4 E2FC                    	Loop PowLoop ;traverse through the loop
   100                                  
   101 000000A6 C3                      ret ;always returns eax
   102                                  	
   103                                  addArray:
   104                                  	;taken from the presentation
   105 000000A7 90                      	nop 
   106 000000A8 8B742404                	mov esi, [esp + 4] ;copy the first parameter to esi; pointer to an array
   107 000000AC 8B4C2408                	mov ecx, [esp + 8]; copy second parameter to ecx; number of items in the array
   108 000000B0 53                      	push ebx ;needed when c++
   109 000000B1 BB00000000              	mov ebx, 0 ;set counter to zero
   110 000000B6 B800000000              	mov eax, 0 ;set total to zero
   111                                  	
   112                                  	Loop1:
   113 000000BB 8B141E                  		mov edx, [esi + ebx] ;copy values in edx to eax
   114 000000BE 01D0                    		add eax, edx ;add the array value in edx to eax
   115 000000C0 83C304                  		add ebx, 4 ;incremeny ebx by a double word size (4 bytes)
   116 000000C3 E2F6                    	loop Loop1 ;ecx contrains the counter - decrementit and loop
   117 000000C5 5B                      	pop ebx ;needed when C++ calls assembler programs
   118 000000C6 C3                      ret ;return
