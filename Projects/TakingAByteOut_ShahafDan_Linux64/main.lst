     1                                  ;
     2                                  ;Example program to execute 64-bit functions in Linux
     3                                  ;
     4                                  
     5                                  ;
     6                                  ;Include our external functions library functions
     7                                  %include "./functions64.inc"
     1                              <1> ;
     2                              <1> ;Include file for the functions library
     3                              <1> ;
     4                              <1> 
     5                              <1> ;Print a string with an ending 00h delimiter to the console
     6                              <1> ;Stack Contents:
     7                              <1> ;	Address of the String (Stack)
     8                              <1> ;Example Usage:
     9                              <1> ;	push	stringVariable
    10                              <1> ;	call	PrintString
    11                              <1> ;
    12                              <1> extern		PrintString
    13                              <1> 
    14                              <1> ;Print a space to the console
    15                              <1> ;Stack Contents:
    16                              <1> ;	None
    17                              <1> ;Example Usage:
    18                              <1> ;	call	PrintSpace
    19                              <1> ;
    20                              <1> extern		PrintSpace
    21                              <1> 
    22                              <1> ;Print 'x' number of spaces
    23                              <1> ;Stack Contents:
    24                              <1> ;	the total spaces to print
    25                              <1> ;Example Usage:
    26                              <1> ;	push	DWORD 5
    27                              <1> ;	call	PrintSpaces
    28                              <1> ;
    29                              <1> extern		PrintSpaces
    30                              <1> 
    31                              <1> ;Print a comma to the console
    32                              <1> ;Stack Contents:
    33                              <1> ;	None
    34                              <1> ;Example Usage:
    35                              <1> ;	call	PrintComma
    36                              <1> ;
    37                              <1> extern		PrintComma
    38                              <1> 
    39                              <1> ;Print a new line to the console
    40                              <1> ;Stack Contents:
    41                              <1> ;	None
    42                              <1> ;Example Usage:
    43                              <1> ;	call	Printendl
    44                              <1> ;
    45                              <1> extern		Printendl
    46                              <1> 
    47                              <1> ;Print a string which is not null terminated
    48                              <1> ;Stack contents:
    49                              <1> ;	The Address of the string to print
    50                              <1> ;	The length of the string to print
    51                              <1> ;Example Usage:
    52                              <1> ;	push	stringVariable
    53                              <1> ;	push	stringVariable.len
    54                              <1> ;	call	PrintText
    55                              <1> ;
    56                              <1> extern		PrintText
    57                              <1> 
    58                              <1> ;Convert and then print a 64bit hex number
    59                              <1> ;Stack contents:
    60                              <1> ;	Value to Convert to an Ascii String
    61                              <1> ;Example Usage:
    62                              <1> ;	push	QWORD [quadWordVariable]
    63                              <1> ;	call	Print64bitNumHex
    64                              <1> ;
    65                              <1> extern		Print64bitNumHex
    66                              <1>    
    67                              <1> ;Convert and then print a 64bit octal number
    68                              <1> ;Stack contents:
    69                              <1> ;	Value to Convert to an Ascii String
    70                              <1> ;Example Usage:
    71                              <1> ;	push	QWORD [quadWordVariable]
    72                              <1> ;	call	Print64bitNumOctal
    73                              <1> ;
    74                              <1> extern		Print64bitNumOctal
    75                              <1> 
    76                              <1> ;Convert and then print a 64bit decimal number
    77                              <1> ;Stack contents:
    78                              <1> ;	Value to Convert to an Ascii String
    79                              <1> ;Example Usage:
    80                              <1> ;	push QWORD [quadwordvariable]
    81                              <1> ;	call	Print64bitNumDecimal
    82                              <1> ;
    83                              <1> extern		Print64bitNumDecimal
    84                              <1> 
    85                              <1> ;Convert and then print a signed 64bit decimal number
    86                              <1> ;Stack contents:
    87                              <1> ;	Value to Convert to an Ascii String
    88                              <1> ;Example Usage:
    89                              <1> ;	push QWORD [quadwordvariable]
    90                              <1> ;	call	Print64bitNumDecimal
    91                              <1> ;
    92                              <1> extern		Print64bitSNumDecimal
    93                              <1> 
    94                              <1> ;Convert and then print a 64bit binary number
    95                              <1> ;Stack contents:
    96                              <1> ;	Value to Convert to an Ascii String
    97                              <1> ;Example Usage:
    98                              <1> ;	push QWORD [quadwordvariable]
    99                              <1> ;	call	Print64bitNumBinary
   100                              <1> ;
   101                              <1> extern		Print64bitNumBinary
   102                              <1> 
   103                              <1> ;Print a full 64bit binary number including leading zeros
   104                              <1> ;Stack contents:
   105                              <1> ;	Value to Convert to an Ascii String
   106                              <1> ;Example Usage:
   107                              <1> ;	push QWORD [quadwordvariable]
   108                              <1> ;	call	Print64bitFullBinary
   109                              <1> ;
   110                              <1> extern		Print64bitFullBinary
   111                              <1> 
   112                              <1> ;This routine prints a string to the screen left justified
   113                              <1> ;Stack contents:
   114                              <1> ;	Address of the string [ebp + 16]
   115                              <1> ;	Number of characters it will be justified within [ebp + 24]
   116                              <1> ;Example Usage:
   117                              <1> ;	push	stringVariable
   118                              <1> ;	push	QWORD 80
   119                              <1> ;	call	PrintLeft
   120                              <1> ;
   121                              <1> extern		PrintLeft
   122                              <1> 
   123                              <1> ;This routine prints a string to the screen right justified
   124                              <1> ;Stack contents:
   125                              <1> ;	Address of the string [ebp + 16]
   126                              <1> ;	Number of characters it will be justified within [ebp + 24]
   127                              <1> ;Example Usage:
   128                              <1> ;	push	stringVariable
   129                              <1> ;	push	QWORD 80
   130                              <1> ;	call	PrintRight
   131                              <1> ;
   132                              <1> extern		PrintRight
   133                              <1> 
   134                              <1> ;This routine prints a string to the screen center justified
   135                              <1> ;Stack contents:
   136                              <1> ;	Address of the string [ebp + 16]
   137                              <1> ;	Number of characters it will be justified within [ebp + 24]
   138                              <1> ;Example Usage:
   139                              <1> ;	push	stringVariable
   140                              <1> ;	push	QWORD 80
   141                              <1> ;	call	PrintCenter
   142                              <1> ;
   143                              <1> extern		PrintCenter
   144                              <1> 
   145                              <1> ;Print all 64bit Registers to the screen
   146                              <1> ;Stack contents:
   147                              <1> ;	None
   148                              <1> ;Example Usage:
   149                              <1> ;	call	PrintRegisters
   150                              <1> ;
   151                              <1> extern		PrintRegisters
   152                              <1> 
   153                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   154                              <1> ;Stack Contents:
   155                              <1> ;	Address of keyboard buffer
   156                              <1> ;	Size of the keyboard buffer
   157                              <1> ;Return:
   158                              <1> ;	Rax will contain the number of characters the user input
   159                              <1> ;Example Usage:
   160                              <1> ;	push	readbuffer
   161                              <1> ;	push	readbuffer.len
   162                              <1> ;	call	ReadText
   163                              <1> extern		ReadText
   164                              <1> 
   165                              <1> ;Input UnSigned Int 
   166                              <1> ;This function will let the user input an integer returned into the RAX register
   167                              <1> ;Arguments: None
   168                              <1> ;Return: 	rax will contain the usigned ingeter
   169                              <1> ;			Carry flag will be set if invalid integer was input
   170                              <1> ;Example Usage:
   171                              <1> ;	call	InputInt
   172                              <1> ;	Note: eax will contain the value of the unsigned integer entered
   173                              <1> ;	jnc		validIntegerInput
   174                              <1> ;	Otherwise, an invalid integer was input
   175                              <1> extern		InputUInt
   176                              <1> 
   177                              <1> ;Input Signed Int 
   178                              <1> ;This function will let the user input a signed integer and put the value 
   179                              <1> ;into the RAX register.
   180                              <1> ;Arguments: None
   181                              <1> ;Return: 	eax will contain the usigned ingeter
   182                              <1> ;			Carry flag will be set if invalid integer was input
   183                              <1> ;Example Usage:
   184                              <1> ;	call	InputSInt
   185                              <1> ;	Note: eax will contain the value of the signed integer entered
   186                              <1> ;	jnc		validIntegerInput
   187                              <1> ;	Otherwise, an invalid integer was input
   188                              <1> extern		InputSInt
   189                              <1> 
   190                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   191                              <1> ;Stack Contents:
   192                              <1> ;	Address of the string to print
   193                              <1> ;	Address of keyboard buffer
   194                              <1> ;	Size of the keyboard buffer
   195                              <1> ;Return:
   196                              <1> ;	Rax will contain the number of characters input
   197                              <1> ;Example Usage:
   198                              <1> ;	push	inputPromptVariable
   199                              <1> ;	push	keyboardBufferVariable
   200                              <1> ;	push	keyboardBufferVariable.len  ;This is the maximum size of the buffer
   201                              <1> ;	call	ReadTextWPrompt
   202                              <1> extern		ReadTextWPrompt
   203                              <1> 
   204                              <1> ;Print a Quad-word floating point number
   205                              <1> ;Stack Contents:
   206                              <1> ;	The floating point number to print
   207                              <1> ;Return:
   208                              <1> ;	None
   209                              <1> ;Example Usage:
   210                              <1> ;	push	numberToPrint
   211                              <1> ;	push	[fractionalDigits]
   212                              <1> ;	call	PrintQWFloat
   213                              <1> extern		PrintQWFloat
   214                              <1> 
   215                              <1> ;Print a Double-word floating point number with scientific notation
   216                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   217                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   218                              <1> ;	much easier and shorter algorithm
   219                              <1> ;Stack Contents:
   220                              <1> ;	The floating point number to print
   221                              <1> ;Return:
   222                              <1> ;	None
   223                              <1> ;Example Usage:
   224                              <1> ;	push	[numberToPrint]
   225                              <1> ;	push	[fractionalDigits]
   226                              <1> ;	call	PrintQWFloatSN
   227                              <1> extern		PrintQWFloatSN
   228                              <1> 
   229                              <1> ;Input a Floating Point Number	
   230                              <1> ;This function will let the user input a string, then it will check it to make sure it
   231                              <1> ;is a valid floating point number.  It will then convert the ASCII string into a QWORD 
   232                              <1> ;and return that value in the RAX register.
   233                              <1> ;Stack Contents:
   234                              <1> ;	None
   235                              <1> ;Return: 	RAX and ST(0) will contain the number
   236                              <1> ;			Carry flag will be set if invalid binary number was input
   237                              <1> ;Example Usage:
   238                              <1> ;	call	InputFloat
   239                              <1> ;	jnc		ValidFloatLabel
   240                              <1> ;	otherwise, a problem occured - print an error message
   241                              <1> extern		InputFloat
   242                              <1> 	
   243                              <1> ;Input Binary Number
   244                              <1> ;This function will let the user input a string, then it will check it to make sure it
   245                              <1> ;is a binary string.  It will then convert the ASCII string into a DWORD and return
   246                              <1> ;that value in the RAX register.
   247                              <1> ;Arguments: 
   248                              <1> ;	None
   249                              <1> ;Return: 	rax will contain the numeric binary value
   250                              <1> ;			Carry flag will be set if invalid binary number was input
   251                              <1> ;Example Usage:
   252                              <1> ;	call	InputBin
   253                              <1> ;	jnc		ValidBinLabel
   254                              <1> ;	otherwise, a problem occured - print an error message
   255                              <1> extern		InputBin
   256                              <1> 
   257                              <1> ;This function will let the user input a string, then it will check it to make sure it
   258                              <1> ;is a hexidecimal string.  It will then convert the ASCII string into a DWORD and return
   259                              <1> ;that value in the EAX register.
   260                              <1> ;Arguments: 
   261                              <1> ;	None
   262                              <1> ;Return: 	rax will contain the numeric hexidecimal value
   263                              <1> ;			Carry flag will be set if invalid hex number was input
   264                              <1> ;Example Usage:
   265                              <1> ;	call	InputHex
   266                              <1> ;	jnc		ValidHexLabel
   267                              <1> ;	otherwise, a problem occured - print an error message
   268                              <1> extern		InputHex
   269                              <1> 
   270                              <1> ;Print all of the floating point registers ST0 - ST7
   271                              <1> ;Stack Contents:
   272                              <1> ;	None
   273                              <1> ;Return: 	None
   274                              <1> ;Example Usage:
   275                              <1> ;	call	PrintFloatingRegisters
   276                              <1> extern		PrintFloatingRegisters
   277                              <1> 
   278                              <1> ;Print a 64-bit floating point number
   279                              <1> ;Stack Contents:
   280                              <1> ;	The floating point number
   281                              <1> ;Return: 	None
   282                              <1> ;Example Usage:
   283                              <1> ;	call	Print64bitFloatBinary
   284                              <1> extern		Print64bitFloatBinary
   285                              <1> 
   286                              <1> ;Set the carry flag if the floating poing number pushed onto the Stack
   287                              <1> ;is a +NAN, -NAN, +Infinity or -Infinity
   288                              <1> ;Stack Contents:
   289                              <1> ; QWORD Floating Point number (Stack)
   290                              <1> ;Return: Carry Flag Set if NAN, Clear if OK
   291                              <1> ;Example Usage
   292                              <1> ;   push  QWORD [floatingVariable]
   293                              <1> ;   call  IsNAN
   294                              <1> extern		IsNAN
   295                              <1> 
   296                              <1> ;Clears the keyboard buffer until \n or null are encountered
   297                              <1> ;Stack contents:
   298                              <1> ;	None
   299                              <1> ;Example Usage:
   300                              <1> ;	call	ClearKBuffer
   301                              <1> ;
   302                              <1> extern		ClearKBuffer
   303                              <1> 
   304                              <1> ;An Internal function used to get the system time in hours
   305                              <1> ;Stack Contents:
   306                              <1> ; None
   307                              <1> ;Return: RAX will have the current Hour
   308                              <1> ;Example Usage
   309                              <1> ;	call	GetCurrentHour
   310                              <1> extern		GetCurrentHour
   311                              <1> 
   312                              <1> ;An Internal function used to get the system time in minutes
   313                              <1> ;Stack Contents:
   314                              <1> ; None
   315                              <1> ;Return: RAX will have the current minute
   316                              <1> ;Example Usage
   317                              <1> ;	call	GetCurrentMinute
   318                              <1> extern		GetCurrentMinute
   319                              <1> 
   320                              <1> ;An Internal function used to get the system time in seconds
   321                              <1> ;Stack Contents:
   322                              <1> ; None
   323                              <1> ;Return: RAX will have the current seconds
   324                              <1> ;Example Usage
   325                              <1> ;	call	GetCurrentSecond
   326                              <1> extern		GetCurrentSecond
   327                              <1> 
   328                              <1> ;An Internal function used to get the system year
   329                              <1> ;Stack Contents:
   330                              <1> ; None
   331                              <1> ;Return: RAX will have the current year
   332                              <1> ;Example Usage
   333                              <1> ;	call	GetCurrentYear
   334                              <1> extern		GetCurrentYear
   335                              <1> 
   336                              <1> ;An Internal function used to get the system month
   337                              <1> ;Stack Contents:
   338                              <1> ; None
   339                              <1> ;Return: RAX will have the current month
   340                              <1> ;Example Usage
   341                              <1> ;	call	GetCurrentMonth
   342                              <1> extern		GetCurrentMonth
   343                              <1> 
   344                              <1> ;An Internal function used to get the system day
   345                              <1> ;Stack Contents:
   346                              <1> ; None
   347                              <1> ;Return: RAX will have the current day
   348                              <1> ;Example Usage
   349                              <1> ;	call	GetCurrentDay
   350                              <1> extern		GetCurrentDay
   351                              <1> 
   352                              <1> ;An Internal function used to get the system time hours, minutes, seconds
   353                              <1> ;Stack Contents:
   354                              <1> ; None
   355                              <1> ;Return: None
   356                              <1> ;Example Usage
   357                              <1> ;   call GetSystemTime
   358                              <1> extern		GetSystemTime
   359                              <1> 
   360                              <1> ;Print the time in the format hh:mm:ss
   361                              <1> ;Stack Contents:
   362                              <1> ; None
   363                              <1> ;Return: None
   364                              <1> ;Example Usage
   365                              <1> ;   call PrintSystemTime
   366                              <1> extern		PrintSystemTime
   367                              <1> 
   368                              <1> ;Print the date in the format mm/dd/yyyy
   369                              <1> ;Stack Contents:
   370                              <1> ; None
   371                              <1> ;Return: None
   372                              <1> ;Example Usage
   373                              <1> ;   call PrintSystemDateEng
   374                              <1> extern		PrintSystemDateEng
   375                              <1> 
   376                              <1> ;Print the date in the format yyyy/mm/dd
   377                              <1> ;Stack Contents:
   378                              <1> ; None
   379                              <1> ;Return: None
   380                              <1> ;Example Usage
   381                              <1> ;   call PrintSystemDateEuro
   382                              <1> extern		PrintSystemDateEuro
   383                              <1> 
   384                              <1> ;Convert and then return in a byte array a64-but number in decimal format
   385                              <1> ;Stack contents:
   386                              <1> ;	Value to Convert to an Ascii String
   387                              <1> ;	Address of byte array to contain the result
   388                              <1> ;Return Value:
   389                              <1> ;	rax = Number of characters returned
   390                              <1> ;Example Usage:
   391                              <1> ;	push 	QWORD [quadwordvariable]
   392                              <1> ;	push 	stringbuffer
   393                              <1> ;	call	ToString64bitNumDecimal
   394                              <1> ;
   395                              <1> extern		ToString64bitNumDecimal
   396                              <1> 
   397                              <1> ;Convert and then return in a byte array a 64bit signed number in decimal format
   398                              <1> ;Stack contents:
   399                              <1> ;	Value to Convert to an Ascii String
   400                              <1> ;	Address of byte array to contain the result
   401                              <1> ;Return Value:
   402                              <1> ;	rax = Number of characters returned
   403                              <1> ;Example Usage:
   404                              <1> ;	push 	QWORD [quadwordvariable]
   405                              <1> ;	push 	stringbuffer
   406                              <1> ;	call	ToString64bitSNumDecimal
   407                              <1> ;
   408                              <1> extern		ToString64bitSNumDecimal
   409                              <1> 
   410                              <1> ;Get the system date in English format and return to the calling function in th array
   411                              <1> ;	provided
   412                              <1> ;Stack contents:
   413                              <1> ;	Address of byte array to contain the result
   414                              <1> ;Return Value:
   415                              <1> ;	rax = Number of characters returned
   416                              <1> ;Example Usage:
   417                              <1> ;	push 	stringbuffer
   418                              <1> ;	call	GetEngDateString
   419                              <1> ;
   420                              <1> extern		GetEngDateString
   421                              <1> 
   422                              <1> ;Get the system date in European format and return to the calling function in th array
   423                              <1> ;	provided
   424                              <1> ;Stack contents:
   425                              <1> ;	Address of byte array to contain the result
   426                              <1> ;Return Value:
   427                              <1> ;	rax = Number of characters returned
   428                              <1> ;Example Usage:
   429                              <1> ;	push 	stringbuffer
   430                              <1> ;	call	GetEuroDateString
   431                              <1> ;
   432                              <1> extern		GetEuroDateString
   433                              <1> 
   434                              <1> ;Get the system time and return to the calling function in th array
   435                              <1> ;	provided
   436                              <1> ;Stack contents:
   437                              <1> ;	Address of byte array to contain the result
   438                              <1> ;Return Value:
   439                              <1> ;	rax = Number of characters returned
   440                              <1> ;Example Usage:
   441                              <1> ;	push 	stringbuffer
   442                              <1> ;	call	GetTimeString
   443                              <1> ;
   444                              <1> extern		GetTimeString
   445                              <1> 
   446                              <1> 
   447                              <1> ;Get a random number from the CPU
   448                              <1> ;Stack contents:
   449                              <1> ;	The maximum value of the random number
   450                              <1> ;	Signed = 1, Unsigned = 0
   451                              <1> ;Return Value:
   452                              <1> ;	rax = Random number value
   453                              <1> ;Example Usage:
   454                              <1> ;	push 	QWORD 200			;Will create a random number no greater than 200
   455                              <1> ;	push	QWORD 1				;1 = signed, 0 = uinsigned
   456                              <1> ;	call	GetRandomInt
   457                              <1> ;
   458                              <1> extern		GetRandomInt
   459                              <1> 
   460                              <1> ;Calculate the Variance from an array of numbers
   461                              <1> ;Stack contents:
   462                              <1> ;	Address of sample array of Quad words
   463                              <1> ;	The number of samples to process
   464                              <1> ;Return Value:
   465                              <1> ;	rax = Calculated Variance
   466                              <1> ;Example Usage:
   467                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   468                              <1> ;	push	10					;process 10 of the numbers in the array
   469                              <1> ;	call	CalcVariance
   470                              <1> ;
   471                              <1> extern		CalcVariance
   472                              <1> 
   473                              <1> ;Calculate the Standard Deviation from an array of numbers
   474                              <1> ;Stack contents:
   475                              <1> ;	Address of sample array of Quad words
   476                              <1> ;	The number of samples to process
   477                              <1> ;Return Value:
   478                              <1> ;	rax = Calculated Standard Deviation
   479                              <1> ;Example Usage:
   480                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   481                              <1> ;	push	10					;process 10 of the numbers in the array
   482                              <1> ;	call	CalcStdDev
   483                              <1> ;
   484                              <1> extern		CalcStdDev
   485                              <1> 
   486                              <1> ;Calculate the Mean from an array of numbers
   487                              <1> ;Stack contents:
   488                              <1> ;	Address of sample array of Quad words
   489                              <1> ;	The number of samples to process
   490                              <1> ;Return Value:
   491                              <1> ;	rax = Calculated Mean
   492                              <1> ;Example Usage:
   493                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   494                              <1> ;	push	10					;process 10 of the numbers in the array
   495                              <1> ;	call	CalcMean
   496                              <1> ;
   497                              <1> extern		CalcMean
   498                              <1> 
   499                              <1> ;Fills an array with random quad values
   500                              <1> ;Stack contents:
   501                              <1> ;	Address of array of Quad words
   502                              <1> ;	The number of samples to process
   503                              <1> ;	Maximum value of the random number(s)
   504                              <1> ;	Signed = 1, Unsigned = 0
   505                              <1> ;Return Value:
   506                              <1> ;	Nothing
   507                              <1> ;Example Usage:
   508                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   509                              <1> ;	push	10					;process 10 of the numbers in the array
   510                              <1> ;	push	500					;The maximum random value should be 500
   511                              <1> ;	push	0					;Unsigned only
   512                              <1> ;	call	RandomArray
   513                              <1> ;
   514                              <1> extern		RandomArray
     8                                   
     9                                  SECTION .data
    10                                  	; put your variables below
    11 00000000 3D3D3D3D3D3D3D3D3D-     	lineAct db "===============================", 0ah ,0dh, 0h
    11 00000009 3D3D3D3D3D3D3D3D3D-
    11 00000012 3D3D3D3D3D3D3D3D3D-
    11 0000001B 3D3D3D3D0A0D00     
    12 00000022 48656C6C6F20576F72-     	welcomeAct db "Hello World, Assignment #8:", 0ah, 0dh, "We will now calculate the variance of the following values" , 0ah, 0dh, 0h
    12 0000002B 6C642C204173736967-
    12 00000034 6E6D656E742023383A-
    12 0000003D 0A0D57652077696C6C-
    12 00000046 206E6F772063616C63-
    12 0000004F 756C61746520746865-
    12 00000058 2076617269616E6365-
    12 00000061 206F66207468652066-
    12 0000006A 6F6C6C6F77696E6720-
    12 00000073 76616C7565730A0D00 
    13 0000007C 4279652C2068617665-     	goodbyeAct db "Bye, have a good one", 0ah, 0dh, 0h
    13 00000085 206120676F6F64206F-
    13 0000008E 6E650A0D00         
    14 00000093 417665726167652069-     	avgAct db "Average is: ", 0h
    14 0000009C 733A2000           
    15 000000A0 546F74616C2069733A-     	totalAct db "Total is: ", 0h
    15 000000A9 2000               
    16 000000AB 7468652076616C7565-     	valuesAct db "the values given are: ", 0h
    16 000000B4 7320676976656E2061-
    16 000000BD 72653A2000         
    17 000000C2 546865205661726961-     	VarianceAct db "The Variance of these values is: ", 0h
    17 000000CB 6E6365206F66207468-
    17 000000D4 6573652076616C7565-
    17 000000DD 732069733A2000     
    18 000000E4 2D00                    	PrintMinus db "-", 0h
    19                                  	
    20                                  	
    21                                  	
    22 000000E6 00FEFFFFFFFFFFFFFD-     	valuesArray	dq	-512, -3, 245, 800, -88 ;everything should be signed
    22 000000EF FFFFFFFFFFFFFFF500-
    22 000000F8 000000000000200300-
    22 00000101 0000000000A8FFFFFF-
    22 0000010A FFFFFFFF           
    23                                  		.len equ (($ - valuesArray) /8 );divide by 8 because we are using quad word
    24                                  	;valuesArray	dq	-365, -722, 567, -876, -222 ;everything should be signed
    25                                  	;	.len equ (($ - valuesArray) /8 );divide by 8 because we are using quad word
    26                                  		
    27                                  		
    28 0000010E 0000000000000000        	total	dq	0h; set total to zero, we will use total / length to calculate he average (mean)
    29 00000116 0000000000000000        	average dq	0h
    30 0000011E 0000000000000000        	varianceTotal dq 0h ;store total of squared values previously to calculating variance
    31 00000126 0000000000000000        	varianceAverage dq 0h
    32                                  SECTION .bss
    33                                  	;reserve memory here
    34                                  	
    35                                  	
    36                                  SECTION     .text
    37                                  	global  _start
    38                                       
    39                                  _start:
    40                                  	;code goes here
    41                                  	
    42                                  	;============ WELCOME MESSAGE =================
    43 00000000 E8(00000000)            	call Printendl
    44 00000005 68[00000000]            	push lineAct
    45 0000000A E8(00000000)            	call PrintString
    46 0000000F 68[22000000]            	push welcomeAct
    47 00000014 E8(00000000)            	call PrintString 
    48 00000019 E8(00000000)            	call Printendl
    49                                  	
    50 0000001E B800000000              	mov rax, 0
    51 00000023 BB00000000              	mov rbx, 0
    52 00000028 BA00000000              	mov rdx, 0; use register to transfer numbers to total
    53 0000002D B900000000              	mov rcx, 0 ;clear counter for loops just in case
    54 00000032 BE00000000              	mov rsi ,0
    55                                  	
    56                                  	
    57                                  	;Call the calcvariance function
    58 00000037 68[E6000000]            	push valuesArray					;push into the stack frame	
    59                                  	;push valuesArray.len				;push into the stack frame
    60 0000003C E8C2000000              	call calcvariance					;call the variable
    61                                  	
    62                                  	
    63                                  	;========= PRINT AND CALCULATE VALUES (also total loop =============
    64                                  
    65                                  	
    66                                  
    67                                  	;======= CALCULATING MEAN DIFFERENCES =============
    68 00000041 B800000000              	mov rax, 0
    69 00000046 BB00000000              	mov rbx, 0
    70 0000004B E8(00000000)            	call Printendl
    71 00000050 B900000000              	mov rcx, 0
    72 00000055 BE00000000              	mov rsi, 0 ;clearing registers, first of all
    73 0000005A B905000000              	mov rcx, valuesArray.len;set iterator
    74                                  	MeanDifLoop:
    75                                  		; for each value:
    76                                  		;1) substract the previosuly calculated mean
    77                                  		;2) sqaure the new value
    78                                  		;3) add it to varianceTotal
    79 0000005F 488B86[E6000000]        		mov rax, [valuesArray + rsi] ;move o rax the next value in line
    80 00000066 F8                      		clc
    81 00000067 488B1C25[0E010000]      		mov rbx, [total]
    82 0000006F 480FBAE33F              		bt rbx, 63
    83 00000074 730A                    		jnc cont0
    84 00000076 48030425[16010000]      		add rax, [average]
    85 0000007E EB08                    		jmp cont9
    86                                  		cont0:
    87 00000080 482B0425[16010000]      		sub rax, [average]
    88                                  		cont9:
    89                                  		
    90                                  	
    91 00000088 48F7E8                  		imul rax ;multiply rax by rax (squaring it)
    92 0000008B 48010425[1E010000]      		add [varianceTotal], rax ;add the new values (which much be positive, becauseit was sqaures) to its corresponding variable
    93                                  		
    94 00000093 B800000000              		mov rax, 0 ;clean rax for safety reasons LOL
    95 00000098 BB00000000              		mov rbx, 0 ;clean the average holder register
    96 0000009D 4883C608                		add rsi, 8;8 for quad words
    97 000000A1 E2BC                    	loop MeanDifLoop
    98 000000A3 E8(00000000)            		call Printendl
    99                                  
   100                                  
   101                                  ;============= PRINT VARIANCE ===============
   102 000000A8 68[C2000000]            push VarianceAct
   103 000000AD E8(00000000)            call PrintString
   104 000000B2 B900000000              	mov rcx, 0
   105 000000B7 B800000000              	mov rax, 0
   106 000000BC 488B0425[1E010000]      	mov rax, [varianceTotal]
   107 000000C4 66B90500                	mov cx, valuesArray.len
   108 000000C8 48F7F9                  	idiv rcx ;divide the variance toatl (storedin rax) by rcx
   109 000000CB 48890425[26010000]      	mov [varianceAverage], rax
   110                                  	
   111 000000D3 50                      	push rax
   112 000000D4 E8(00000000)            	call Print64bitNumDecimal
   113                                  	
   114                                  	;=========== GOODBYE MESSAGE ================
   115 000000D9 E8(00000000)            	call Printendl
   116 000000DE 68[7C000000]            	push goodbyeAct
   117 000000E3 E8(00000000)            	call PrintString
   118 000000E8 E8(00000000)            	call Printendl
   119 000000ED 68[00000000]            	push lineAct
   120 000000F2 E8(00000000)            	call PrintString
   121                                  	
   122                                  ;=============== EXIT ==================
   123                                  ;Setup the registers for exit and poke the kernel
   124                                  ;Exit: 
   125                                  Exit:
   126 000000F7 B83C000000              	mov		rax, 60					;60 = system exit
   127 000000FC BF00000000              	mov		rdi, 0					;0 = return code
   128 00000101 0F05                    	syscall							;Poke the kernel
   129                                  
   130                                  ;============== VARIANCE CALCULATOR FUNCTION =================
   131                                  calcvariance:
   132                                  	;=========CREATE THE STACK============
   133 00000103 55                      	push rbp 						;Store the current stack frame
   134 00000104 4889E5                  	mov rbp, rsp					;Preserve esp into ebp for argument reference			
   135 00000107 BB00000000              	mov rbx, 0						;we will store the total in rbx for now
   136                                  	;========= STACK ACTION CODE ============
   137 0000010C 488B7D10                	mov rdi, [rbp + 16]				;push the address of the sampleArray stored in rbp + 16 to a pointer variable
   138 00000110 B905000000              	mov rcx, 5						;Do we pass the number of elements as a parameter? - CHANGE
   139                                  	loopie:
   140 00000115 488B07                  		mov rax, [rdi]				;move to rax the dereferenced value stored in the rdi pointer
   141 00000118 F8                      		clc							;clear carry flag, we will use it to detect negative values
   142 00000119 480FBAE03F              		bt rax, 63					;use bt to store the most SIGNificant bit in the carry flag
   143 0000011E 7312                    		jnc notNeg					;if carry flag os 0: not negative
   144 00000120 48F7D8                  		neg rax	
   145 00000123 4829C3                  		sub rbx, rax				;substract the value from the total
   146 00000126 68[E4000000]            		push PrintMinus				;print a minus if the vaue is negative
   147 0000012B E8(00000000)            		call PrintString
   148 00000130 EB03                    		jmp neg
   149                                  		notNeg:						; conitnue code here if the value is not negative
   150 00000132 4801C3                  		add rbx, rax				;add the value to the total
   151                                  		neg:						;continue code here if thevalue IS negative
   152 00000135 50                      		push rax					;prepare to print
   153 00000136 E8(00000000)            		call Print64bitNumDecimal	;Print values
   154 0000013B E8(00000000)            		call PrintComma				;Print a coma
   155 00000140 4883C708                		add rdi, 8 					;go to the next argument in the array, whose address is stored in the rdi pointer
   156 00000144 E2CF                    	loop loopie
   157                                  	
   158 00000146 E8(00000000)            	call Printendl					;line spacing
   159                                  	
   160                                  	;------ Print total----------
   161 0000014B 68[A0000000]            	push totalAct					;Print total prompt
   162 00000150 E8(00000000)            	call PrintString				;Print it
   163 00000155 F8                      	clc								;Clear he carry flag: will be used to determine sign of total
   164 00000156 480FBAE33F              	bt rbx, 63						;get the SIGNficiant bit of the total (storedin rbx)
   165 0000015B 730D                    	jnc notNeg2						;jump if not negative
   166 0000015D 48F7DB                  	neg rbx							;but if it negative, re-negate it
   167 00000160 68[E4000000]            	push PrintMinus					;and also print a minux sign
   168 00000165 E8(00000000)            	call PrintString				; Print it
   169                                  	notNeg2:						;But, if the total (in rbx) is not negative:
   170 0000016A 53                      	push rbx						;Prepare printing total
   171 0000016B E8(00000000)            	call Print64bitNumDecimal		; print total
   172 00000170 E8(00000000)            	call Printendl
   173                                  	
   174                                  	
   175                                  	;----------Calculate average----------
   176                                  	;carry still holds the negation value!
   177 00000175 B800000000              	mov rax, 0						;clear rax
   178 0000017A 4889D8                  	mov rax, rbx
   179 0000017D B905000000              	mov rcx, 5						;now rax holds the total
   180 00000182 48F7F9                  	idiv rcx						;divide rax with 5 - CHANGE TO A LENGTH VARIABLE
   181                                  	
   182 00000185 68[93000000]            	push avgAct						;prepare to print average act
   183 0000018A E8(00000000)            	call PrintString				;print it
   184 0000018F F8                      	clc								;Clear carry
   185 00000190 480FBAE03F              	bt rax, 63						;check SIGNificant bit	
   186 00000195 730A                    	jnc notNeg3						;if the number is negative {
   187 00000197 68[E4000000]            	push PrintMinus					;print a minus
   188 0000019C E8(00000000)            	call PrintString				;}
   189                                  	notNeg3:						;else {...}	
   190 000001A1 50                      	push rax						;cout <<
   191 000001A2 E8(00000000)            	call Print64bitNumDecimal		;average <<
   192 000001A7 E8(00000000)            	call Printendl					;endl;
   193                                  	
   194                                  	
   195                                  	;=========== DESTROY STACK ==============
   196 000001AC 4889EC                  	mov rsp, rbp					;Restore the stack position
   197 000001AF 5D                      	pop rbp							;Restore ebp's original value in the stack frame
   198                                  	
   199 000001B0 C3                      ret 	
   200                                  
   201                                  ;============= SPACE FOR CONVENIENCE ==================
   202                                  
   203                                  
   204                                  
   205                                  
   206                                  
   207                                  
   208                                  
   209                                  
   210                                  
   211                                  
   212                                  
   213                                  
   214                                  
