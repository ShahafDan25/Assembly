     1                                  ;
     2                                  ;Example program to execute 64-bit functions in Linux
     3                                  ;
     4                                  
     5                                  ;
     6                                  ;Include our external functions library functions
     7                                  %include "./functions64.inc"
     1                              <1> ;
     2                              <1> ;Include file for the functions library
     3                              <1> ;
     4                              <1> 
     5                              <1> ;Print a string with an ending 00h delimiter to the console
     6                              <1> ;Stack Contents:
     7                              <1> ;	Address of the String (Stack)
     8                              <1> ;Example Usage:
     9                              <1> ;	push	stringVariable
    10                              <1> ;	call	PrintString
    11                              <1> ;
    12                              <1> extern		PrintString
    13                              <1> 
    14                              <1> ;Print a space to the console
    15                              <1> ;Stack Contents:
    16                              <1> ;	None
    17                              <1> ;Example Usage:
    18                              <1> ;	call	PrintSpace
    19                              <1> ;
    20                              <1> extern		PrintSpace
    21                              <1> 
    22                              <1> ;Print 'x' number of spaces
    23                              <1> ;Stack Contents:
    24                              <1> ;	the total spaces to print
    25                              <1> ;Example Usage:
    26                              <1> ;	push	DWORD 5
    27                              <1> ;	call	PrintSpaces
    28                              <1> ;
    29                              <1> extern		PrintSpaces
    30                              <1> 
    31                              <1> ;Print a comma to the console
    32                              <1> ;Stack Contents:
    33                              <1> ;	None
    34                              <1> ;Example Usage:
    35                              <1> ;	call	PrintComma
    36                              <1> ;
    37                              <1> extern		PrintComma
    38                              <1> 
    39                              <1> ;Print a new line to the console
    40                              <1> ;Stack Contents:
    41                              <1> ;	None
    42                              <1> ;Example Usage:
    43                              <1> ;	call	Printendl
    44                              <1> ;
    45                              <1> extern		Printendl
    46                              <1> 
    47                              <1> ;Print a string which is not null terminated
    48                              <1> ;Stack contents:
    49                              <1> ;	The Address of the string to print
    50                              <1> ;	The length of the string to print
    51                              <1> ;Example Usage:
    52                              <1> ;	push	stringVariable
    53                              <1> ;	push	stringVariable.len
    54                              <1> ;	call	PrintText
    55                              <1> ;
    56                              <1> extern		PrintText
    57                              <1> 
    58                              <1> ;Convert and then print a 64bit hex number
    59                              <1> ;Stack contents:
    60                              <1> ;	Value to Convert to an Ascii String
    61                              <1> ;Example Usage:
    62                              <1> ;	push	QWORD [quadWordVariable]
    63                              <1> ;	call	Print64bitNumHex
    64                              <1> ;
    65                              <1> extern		Print64bitNumHex
    66                              <1>    
    67                              <1> ;Convert and then print a 64bit octal number
    68                              <1> ;Stack contents:
    69                              <1> ;	Value to Convert to an Ascii String
    70                              <1> ;Example Usage:
    71                              <1> ;	push	QWORD [quadWordVariable]
    72                              <1> ;	call	Print64bitNumOctal
    73                              <1> ;
    74                              <1> extern		Print64bitNumOctal
    75                              <1> 
    76                              <1> ;Convert and then print a 64bit decimal number
    77                              <1> ;Stack contents:
    78                              <1> ;	Value to Convert to an Ascii String
    79                              <1> ;Example Usage:
    80                              <1> ;	push QWORD [quadwordvariable]
    81                              <1> ;	call	Print64bitNumDecimal
    82                              <1> ;
    83                              <1> extern		Print64bitNumDecimal
    84                              <1> 
    85                              <1> ;Convert and then print a signed 64bit decimal number
    86                              <1> ;Stack contents:
    87                              <1> ;	Value to Convert to an Ascii String
    88                              <1> ;Example Usage:
    89                              <1> ;	push QWORD [quadwordvariable]
    90                              <1> ;	call	Print64bitNumDecimal
    91                              <1> ;
    92                              <1> extern		Print64bitSNumDecimal
    93                              <1> 
    94                              <1> ;Convert and then print a 64bit binary number
    95                              <1> ;Stack contents:
    96                              <1> ;	Value to Convert to an Ascii String
    97                              <1> ;Example Usage:
    98                              <1> ;	push QWORD [quadwordvariable]
    99                              <1> ;	call	Print64bitNumBinary
   100                              <1> ;
   101                              <1> extern		Print64bitNumBinary
   102                              <1> 
   103                              <1> ;Print a full 64bit binary number including leading zeros
   104                              <1> ;Stack contents:
   105                              <1> ;	Value to Convert to an Ascii String
   106                              <1> ;Example Usage:
   107                              <1> ;	push QWORD [quadwordvariable]
   108                              <1> ;	call	Print64bitFullBinary
   109                              <1> ;
   110                              <1> extern		Print64bitFullBinary
   111                              <1> 
   112                              <1> ;This routine prints a string to the screen left justified
   113                              <1> ;Stack contents:
   114                              <1> ;	Address of the string [ebp + 16]
   115                              <1> ;	Number of characters it will be justified within [ebp + 24]
   116                              <1> ;Example Usage:
   117                              <1> ;	push	stringVariable
   118                              <1> ;	push	QWORD 80
   119                              <1> ;	call	PrintLeft
   120                              <1> ;
   121                              <1> extern		PrintLeft
   122                              <1> 
   123                              <1> ;This routine prints a string to the screen right justified
   124                              <1> ;Stack contents:
   125                              <1> ;	Address of the string [ebp + 16]
   126                              <1> ;	Number of characters it will be justified within [ebp + 24]
   127                              <1> ;Example Usage:
   128                              <1> ;	push	stringVariable
   129                              <1> ;	push	QWORD 80
   130                              <1> ;	call	PrintRight
   131                              <1> ;
   132                              <1> extern		PrintRight
   133                              <1> 
   134                              <1> ;This routine prints a string to the screen center justified
   135                              <1> ;Stack contents:
   136                              <1> ;	Address of the string [ebp + 16]
   137                              <1> ;	Number of characters it will be justified within [ebp + 24]
   138                              <1> ;Example Usage:
   139                              <1> ;	push	stringVariable
   140                              <1> ;	push	QWORD 80
   141                              <1> ;	call	PrintCenter
   142                              <1> ;
   143                              <1> extern		PrintCenter
   144                              <1> 
   145                              <1> ;Print all 64bit Registers to the screen
   146                              <1> ;Stack contents:
   147                              <1> ;	None
   148                              <1> ;Example Usage:
   149                              <1> ;	call	PrintRegisters
   150                              <1> ;
   151                              <1> extern		PrintRegisters
   152                              <1> 
   153                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   154                              <1> ;Stack Contents:
   155                              <1> ;	Address of keyboard buffer
   156                              <1> ;	Size of the keyboard buffer
   157                              <1> ;Return:
   158                              <1> ;	Rax will contain the number of characters the user input
   159                              <1> ;Example Usage:
   160                              <1> ;	push	readbuffer
   161                              <1> ;	push	readbuffer.len
   162                              <1> ;	call	ReadText
   163                              <1> extern		ReadText
   164                              <1> 
   165                              <1> ;Input UnSigned Int 
   166                              <1> ;This function will let the user input an integer returned into the RAX register
   167                              <1> ;Arguments: None
   168                              <1> ;Return: 	rax will contain the usigned ingeter
   169                              <1> ;			Carry flag will be set if invalid integer was input
   170                              <1> ;Example Usage:
   171                              <1> ;	call	InputInt
   172                              <1> ;	Note: eax will contain the value of the unsigned integer entered
   173                              <1> ;	jnc		validIntegerInput
   174                              <1> ;	Otherwise, an invalid integer was input
   175                              <1> extern		InputUInt
   176                              <1> 
   177                              <1> ;Input Signed Int 
   178                              <1> ;This function will let the user input a signed integer and put the value 
   179                              <1> ;into the RAX register.
   180                              <1> ;Arguments: None
   181                              <1> ;Return: 	eax will contain the usigned ingeter
   182                              <1> ;			Carry flag will be set if invalid integer was input
   183                              <1> ;Example Usage:
   184                              <1> ;	call	InputSInt
   185                              <1> ;	Note: eax will contain the value of the signed integer entered
   186                              <1> ;	jnc		validIntegerInput
   187                              <1> ;	Otherwise, an invalid integer was input
   188                              <1> extern		InputSInt
   189                              <1> 
   190                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   191                              <1> ;Stack Contents:
   192                              <1> ;	Address of the string to print
   193                              <1> ;	Address of keyboard buffer
   194                              <1> ;	Size of the keyboard buffer
   195                              <1> ;Return:
   196                              <1> ;	Rax will contain the number of characters input
   197                              <1> ;Example Usage:
   198                              <1> ;	push	inputPromptVariable
   199                              <1> ;	push	keyboardBufferVariable
   200                              <1> ;	push	keyboardBufferVariable.len  ;This is the maximum size of the buffer
   201                              <1> ;	call	ReadTextWPrompt
   202                              <1> extern		ReadTextWPrompt
   203                              <1> 
   204                              <1> ;Print a Quad-word floating point number
   205                              <1> ;Stack Contents:
   206                              <1> ;	The floating point number to print
   207                              <1> ;Return:
   208                              <1> ;	None
   209                              <1> ;Example Usage:
   210                              <1> ;	push	numberToPrint
   211                              <1> ;	push	[fractionalDigits]
   212                              <1> ;	call	PrintQWFloat
   213                              <1> extern		PrintQWFloat
   214                              <1> 
   215                              <1> ;Print a Double-word floating point number with scientific notation
   216                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   217                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   218                              <1> ;	much easier and shorter algorithm
   219                              <1> ;Stack Contents:
   220                              <1> ;	The floating point number to print
   221                              <1> ;Return:
   222                              <1> ;	None
   223                              <1> ;Example Usage:
   224                              <1> ;	push	[numberToPrint]
   225                              <1> ;	push	[fractionalDigits]
   226                              <1> ;	call	PrintQWFloatSN
   227                              <1> extern		PrintQWFloatSN
   228                              <1> 
   229                              <1> ;Input a Floating Point Number	
   230                              <1> ;This function will let the user input a string, then it will check it to make sure it
   231                              <1> ;is a valid floating point number.  It will then convert the ASCII string into a QWORD 
   232                              <1> ;and return that value in the RAX register.
   233                              <1> ;Stack Contents:
   234                              <1> ;	None
   235                              <1> ;Return: 	RAX and ST(0) will contain the number
   236                              <1> ;			Carry flag will be set if invalid binary number was input
   237                              <1> ;Example Usage:
   238                              <1> ;	call	InputFloat
   239                              <1> ;	jnc		ValidFloatLabel
   240                              <1> ;	otherwise, a problem occured - print an error message
   241                              <1> extern		InputFloat
   242                              <1> 	
   243                              <1> ;Input Binary Number
   244                              <1> ;This function will let the user input a string, then it will check it to make sure it
   245                              <1> ;is a binary string.  It will then convert the ASCII string into a DWORD and return
   246                              <1> ;that value in the RAX register.
   247                              <1> ;Arguments: 
   248                              <1> ;	None
   249                              <1> ;Return: 	rax will contain the numeric binary value
   250                              <1> ;			Carry flag will be set if invalid binary number was input
   251                              <1> ;Example Usage:
   252                              <1> ;	call	InputBin
   253                              <1> ;	jnc		ValidBinLabel
   254                              <1> ;	otherwise, a problem occured - print an error message
   255                              <1> extern		InputBin
   256                              <1> 
   257                              <1> ;This function will let the user input a string, then it will check it to make sure it
   258                              <1> ;is a hexidecimal string.  It will then convert the ASCII string into a DWORD and return
   259                              <1> ;that value in the EAX register.
   260                              <1> ;Arguments: 
   261                              <1> ;	None
   262                              <1> ;Return: 	rax will contain the numeric hexidecimal value
   263                              <1> ;			Carry flag will be set if invalid hex number was input
   264                              <1> ;Example Usage:
   265                              <1> ;	call	InputHex
   266                              <1> ;	jnc		ValidHexLabel
   267                              <1> ;	otherwise, a problem occured - print an error message
   268                              <1> extern		InputHex
   269                              <1> 
   270                              <1> ;Print all of the floating point registers ST0 - ST7
   271                              <1> ;Stack Contents:
   272                              <1> ;	None
   273                              <1> ;Return: 	None
   274                              <1> ;Example Usage:
   275                              <1> ;	call	PrintFloatingRegisters
   276                              <1> extern		PrintFloatingRegisters
   277                              <1> 
   278                              <1> ;Print a 64-bit floating point number
   279                              <1> ;Stack Contents:
   280                              <1> ;	The floating point number
   281                              <1> ;Return: 	None
   282                              <1> ;Example Usage:
   283                              <1> ;	call	Print64bitFloatBinary
   284                              <1> extern		Print64bitFloatBinary
   285                              <1> 
   286                              <1> ;Set the carry flag if the floating poing number pushed onto the Stack
   287                              <1> ;is a +NAN, -NAN, +Infinity or -Infinity
   288                              <1> ;Stack Contents:
   289                              <1> ; QWORD Floating Point number (Stack)
   290                              <1> ;Return: Carry Flag Set if NAN, Clear if OK
   291                              <1> ;Example Usage
   292                              <1> ;   push  QWORD [floatingVariable]
   293                              <1> ;   call  IsNAN
   294                              <1> extern		IsNAN
   295                              <1> 
   296                              <1> ;Clears the keyboard buffer until \n or null are encountered
   297                              <1> ;Stack contents:
   298                              <1> ;	None
   299                              <1> ;Example Usage:
   300                              <1> ;	call	ClearKBuffer
   301                              <1> ;
   302                              <1> extern		ClearKBuffer
   303                              <1> 
   304                              <1> ;An Internal function used to get the system time in hours
   305                              <1> ;Stack Contents:
   306                              <1> ; None
   307                              <1> ;Return: RAX will have the current Hour
   308                              <1> ;Example Usage
   309                              <1> ;	call	GetCurrentHour
   310                              <1> extern		GetCurrentHour
   311                              <1> 
   312                              <1> ;An Internal function used to get the system time in minutes
   313                              <1> ;Stack Contents:
   314                              <1> ; None
   315                              <1> ;Return: RAX will have the current minute
   316                              <1> ;Example Usage
   317                              <1> ;	call	GetCurrentMinute
   318                              <1> extern		GetCurrentMinute
   319                              <1> 
   320                              <1> ;An Internal function used to get the system time in seconds
   321                              <1> ;Stack Contents:
   322                              <1> ; None
   323                              <1> ;Return: RAX will have the current seconds
   324                              <1> ;Example Usage
   325                              <1> ;	call	GetCurrentSecond
   326                              <1> extern		GetCurrentSecond
   327                              <1> 
   328                              <1> ;An Internal function used to get the system year
   329                              <1> ;Stack Contents:
   330                              <1> ; None
   331                              <1> ;Return: RAX will have the current year
   332                              <1> ;Example Usage
   333                              <1> ;	call	GetCurrentYear
   334                              <1> extern		GetCurrentYear
   335                              <1> 
   336                              <1> ;An Internal function used to get the system month
   337                              <1> ;Stack Contents:
   338                              <1> ; None
   339                              <1> ;Return: RAX will have the current month
   340                              <1> ;Example Usage
   341                              <1> ;	call	GetCurrentMonth
   342                              <1> extern		GetCurrentMonth
   343                              <1> 
   344                              <1> ;An Internal function used to get the system day
   345                              <1> ;Stack Contents:
   346                              <1> ; None
   347                              <1> ;Return: RAX will have the current day
   348                              <1> ;Example Usage
   349                              <1> ;	call	GetCurrentDay
   350                              <1> extern		GetCurrentDay
   351                              <1> 
   352                              <1> ;An Internal function used to get the system time hours, minutes, seconds
   353                              <1> ;Stack Contents:
   354                              <1> ; None
   355                              <1> ;Return: None
   356                              <1> ;Example Usage
   357                              <1> ;   call GetSystemTime
   358                              <1> extern		GetSystemTime
   359                              <1> 
   360                              <1> ;Print the time in the format hh:mm:ss
   361                              <1> ;Stack Contents:
   362                              <1> ; None
   363                              <1> ;Return: None
   364                              <1> ;Example Usage
   365                              <1> ;   call PrintSystemTime
   366                              <1> extern		PrintSystemTime
   367                              <1> 
   368                              <1> ;Print the date in the format mm/dd/yyyy
   369                              <1> ;Stack Contents:
   370                              <1> ; None
   371                              <1> ;Return: None
   372                              <1> ;Example Usage
   373                              <1> ;   call PrintSystemDateEng
   374                              <1> extern		PrintSystemDateEng
   375                              <1> 
   376                              <1> ;Print the date in the format yyyy/mm/dd
   377                              <1> ;Stack Contents:
   378                              <1> ; None
   379                              <1> ;Return: None
   380                              <1> ;Example Usage
   381                              <1> ;   call PrintSystemDateEuro
   382                              <1> extern		PrintSystemDateEuro
   383                              <1> 
   384                              <1> ;Convert and then return in a byte array a64-but number in decimal format
   385                              <1> ;Stack contents:
   386                              <1> ;	Value to Convert to an Ascii String
   387                              <1> ;	Address of byte array to contain the result
   388                              <1> ;Return Value:
   389                              <1> ;	rax = Number of characters returned
   390                              <1> ;Example Usage:
   391                              <1> ;	push 	QWORD [quadwordvariable]
   392                              <1> ;	push 	stringbuffer
   393                              <1> ;	call	ToString64bitNumDecimal
   394                              <1> ;
   395                              <1> extern		ToString64bitNumDecimal
   396                              <1> 
   397                              <1> ;Convert and then return in a byte array a 64bit signed number in decimal format
   398                              <1> ;Stack contents:
   399                              <1> ;	Value to Convert to an Ascii String
   400                              <1> ;	Address of byte array to contain the result
   401                              <1> ;Return Value:
   402                              <1> ;	rax = Number of characters returned
   403                              <1> ;Example Usage:
   404                              <1> ;	push 	QWORD [quadwordvariable]
   405                              <1> ;	push 	stringbuffer
   406                              <1> ;	call	ToString64bitSNumDecimal
   407                              <1> ;
   408                              <1> extern		ToString64bitSNumDecimal
   409                              <1> 
   410                              <1> ;Get the system date in English format and return to the calling function in th array
   411                              <1> ;	provided
   412                              <1> ;Stack contents:
   413                              <1> ;	Address of byte array to contain the result
   414                              <1> ;Return Value:
   415                              <1> ;	rax = Number of characters returned
   416                              <1> ;Example Usage:
   417                              <1> ;	push 	stringbuffer
   418                              <1> ;	call	GetEngDateString
   419                              <1> ;
   420                              <1> extern		GetEngDateString
   421                              <1> 
   422                              <1> ;Get the system date in European format and return to the calling function in th array
   423                              <1> ;	provided
   424                              <1> ;Stack contents:
   425                              <1> ;	Address of byte array to contain the result
   426                              <1> ;Return Value:
   427                              <1> ;	rax = Number of characters returned
   428                              <1> ;Example Usage:
   429                              <1> ;	push 	stringbuffer
   430                              <1> ;	call	GetEuroDateString
   431                              <1> ;
   432                              <1> extern		GetEuroDateString
   433                              <1> 
   434                              <1> ;Get the system time and return to the calling function in th array
   435                              <1> ;	provided
   436                              <1> ;Stack contents:
   437                              <1> ;	Address of byte array to contain the result
   438                              <1> ;Return Value:
   439                              <1> ;	rax = Number of characters returned
   440                              <1> ;Example Usage:
   441                              <1> ;	push 	stringbuffer
   442                              <1> ;	call	GetTimeString
   443                              <1> ;
   444                              <1> extern		GetTimeString
   445                              <1> 
   446                              <1> 
   447                              <1> ;Get a random number from the CPU
   448                              <1> ;Stack contents:
   449                              <1> ;	The maximum value of the random number
   450                              <1> ;	Signed = 1, Unsigned = 0
   451                              <1> ;Return Value:
   452                              <1> ;	rax = Random number value
   453                              <1> ;Example Usage:
   454                              <1> ;	push 	QWORD 200			;Will create a random number no greater than 200
   455                              <1> ;	push	QWORD 1				;1 = signed, 0 = uinsigned
   456                              <1> ;	call	GetRandomInt
   457                              <1> ;
   458                              <1> extern		GetRandomInt
   459                              <1> 
   460                              <1> ;Calculate the Variance from an array of numbers
   461                              <1> ;Stack contents:
   462                              <1> ;	Address of sample array of Quad words
   463                              <1> ;	The number of samples to process
   464                              <1> ;Return Value:
   465                              <1> ;	rax = Calculated Variance
   466                              <1> ;Example Usage:
   467                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   468                              <1> ;	push	10					;process 10 of the numbers in the array
   469                              <1> ;	call	CalcVariance
   470                              <1> ;
   471                              <1> extern		CalcVariance
   472                              <1> 
   473                              <1> ;Calculate the Standard Deviation from an array of numbers
   474                              <1> ;Stack contents:
   475                              <1> ;	Address of sample array of Quad words
   476                              <1> ;	The number of samples to process
   477                              <1> ;Return Value:
   478                              <1> ;	rax = Calculated Standard Deviation
   479                              <1> ;Example Usage:
   480                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   481                              <1> ;	push	10					;process 10 of the numbers in the array
   482                              <1> ;	call	CalcStdDev
   483                              <1> ;
   484                              <1> extern		CalcStdDev
   485                              <1> 
   486                              <1> ;Calculate the Mean from an array of numbers
   487                              <1> ;Stack contents:
   488                              <1> ;	Address of sample array of Quad words
   489                              <1> ;	The number of samples to process
   490                              <1> ;Return Value:
   491                              <1> ;	rax = Calculated Mean
   492                              <1> ;Example Usage:
   493                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   494                              <1> ;	push	10					;process 10 of the numbers in the array
   495                              <1> ;	call	CalcMean
   496                              <1> ;
   497                              <1> extern		CalcMean
   498                              <1> 
   499                              <1> ;Fills an array with random quad values
   500                              <1> ;Stack contents:
   501                              <1> ;	Address of array of Quad words
   502                              <1> ;	The number of samples to process
   503                              <1> ;	Maximum value of the random number(s)
   504                              <1> ;	Signed = 1, Unsigned = 0
   505                              <1> ;Return Value:
   506                              <1> ;	Nothing
   507                              <1> ;Example Usage:
   508                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   509                              <1> ;	push	10					;process 10 of the numbers in the array
   510                              <1> ;	push	500					;The maximum random value should be 500
   511                              <1> ;	push	0					;Unsigned only
   512                              <1> ;	call	RandomArray
   513                              <1> ;
   514                              <1> extern		RandomArray
     8                                   
     9                                  SECTION .data
    10                                  	; put your variables below
    11 00000000 3D3D3D3D3D3D3D3D3D-     	lineAct db "===============================", 0ah ,0dh, 0h
    11 00000009 3D3D3D3D3D3D3D3D3D-
    11 00000012 3D3D3D3D3D3D3D3D3D-
    11 0000001B 3D3D3D3D0A0D00     
    12 00000022 48656C6C6F20576F72-     	welcomeAct db "Hello World, Assignment #8:", 0ah, 0dh, "We will now calculate the variance of the following values" , 0ah, 0dh, 0h
    12 0000002B 6C642C204173736967-
    12 00000034 6E6D656E742023383A-
    12 0000003D 0A0D57652077696C6C-
    12 00000046 206E6F772063616C63-
    12 0000004F 756C61746520746865-
    12 00000058 2076617269616E6365-
    12 00000061 206F66207468652066-
    12 0000006A 6F6C6C6F77696E6720-
    12 00000073 76616C7565730A0D00 
    13 0000007C 4279652C2068617665-     	goodbyeAct db "Bye, have a good one", 0ah, 0dh, 0h
    13 00000085 206120676F6F64206F-
    13 0000008E 6E650A0D00         
    14 00000093 417665726167652069-     	avgAct db "Average is: ", 0h
    14 0000009C 733A2000           
    15 000000A0 546F74616C2069733A-     	totalAct db "Total is: ", 0h
    15 000000A9 2000               
    16 000000AB 7468652076616C7565-     	valuesAct db "the values given are: ", 0h
    16 000000B4 7320676976656E2061-
    16 000000BD 72653A2000         
    17 000000C2 546865205661726961-     	VarianceAct db "The Variance is: ", 0h
    17 000000CB 6E63652069733A2000 
    18 000000D4 2D00                    	PrintMinus db "-", 0h
    19                                  	
    20                                  	
    21                                  	;valuesArray	dq	-512, -3, 245, 800, -88 ;everything should be signed
    22                                  	;	.len equ (($ - valuesArray) /8 );divide by 8 because we are using quad word
    23 000000D6 93FEFFFFFFFFFFFF2E-     	valuesArray	dq	-365, -722, 567, -876, -222 ;everything should be signed
    23 000000DF FDFFFFFFFFFFFF3702-
    23 000000E8 00000000000094FCFF-
    23 000000F1 FFFFFFFFFF22FFFFFF-
    23 000000FA FFFFFFFF           
    24                                  		.len equ (($ - valuesArray) /8 );divide by 8 because we are using quad word
    25                                  		
    26                                  SECTION .bss
    27                                  	
    28                                  	
    29                                  SECTION     .text
    30                                  	global  _start
    31                                       
    32                                  _start:
    33                                  	;code goes here
    34                                  	
    35                                  	;============ WELCOME MESSAGE =================
    36 00000000 E8(00000000)            	call Printendl
    37 00000005 68[00000000]            	push lineAct
    38 0000000A E8(00000000)            	call PrintString
    39 0000000F 68[22000000]            	push welcomeAct
    40 00000014 E8(00000000)            	call PrintString 
    41 00000019 E8(00000000)            	call Printendl
    42                                  	
    43 0000001E B800000000              	mov rax, 0
    44 00000023 BB00000000              	mov rbx, 0
    45 00000028 BA00000000              	mov rdx, 0; use register to transfer numbers to total
    46 0000002D B900000000              	mov rcx, 0 ;clear counter for loops just in case
    47 00000032 BE00000000              	mov rsi ,0
    48                                  	
    49                                  	
    50                                  	;Call the calcvariance function
    51 00000037 6A05                    	push valuesArray.len
    52 00000039 68[D6000000]            	push valuesArray
    53                                  						;push into the stack frame	
    54 0000003E E82A000000              	call calcvariance					;call the variable
    55                                  		
    56                                  	
    57                                  	;=========== GOODBYE MESSAGE ================
    58 00000043 E8(00000000)            	call Printendl
    59 00000048 68[7C000000]            	push goodbyeAct
    60 0000004D E8(00000000)            	call PrintString
    61 00000052 E8(00000000)            	call Printendl
    62 00000057 68[00000000]            	push lineAct
    63 0000005C E8(00000000)            	call PrintString
    64                                  	
    65                                  ;=============== EXIT ==================
    66                                  ;Setup the registers for exit and poke the kernel
    67                                  ;Exit: 
    68                                  Exit:
    69 00000061 B83C000000              	mov		rax, 60					;60 = system exit
    70 00000066 BF00000000              	mov		rdi, 0					;0 = return code
    71 0000006B 0F05                    	syscall							;Poke the kernel
    72                                  
    73                                  ;============== VARIANCE CALCULATOR FUNCTION =================
    74                                  calcvariance:
    75                                  	;=========CREATE THE STACK============
    76 0000006D 55                      	push rbp 						;Store the current stack frame
    77 0000006E 4889E5                  	mov rbp, rsp					;Preserve esp into ebp for argument reference			
    78 00000071 BB00000000              	mov rbx, 0		
    79 00000076 BA00000000              	mov rdx, 0
    80 0000007B B900000000              	mov rcx, 0				;we will store the total in rbx for now
    81                                  	;========= STACK ACTION CODE ============
    82 00000080 488B7D10                	mov rdi, [rbp + 16]				;push the address of the sampleArray stored in rbp + 16 to a pointer variable
    83 00000084 488B4D18                	mov rcx, [rbp + 24];
    84                                  	
    85                                  	loopie:
    86 00000088 488B07                  		mov rax, [rdi]				;move to rax the dereferenced value stored in the rdi pointer
    87 0000008B F8                      		clc							;clear carry flag, we will use it to detect negative values
    88 0000008C 480FBAE03F              		bt rax, 63					;use bt to store the most SIGNificant bit in the carry flag
    89 00000091 7312                    		jnc notNeg					;if carry flag os 0: not negative
    90 00000093 48F7D8                  		neg rax	
    91 00000096 4829C3                  		sub rbx, rax				;substract the value from the total
    92 00000099 68[D4000000]            		push PrintMinus				;print a minus if the vaue is negative
    93 0000009E E8(00000000)            		call PrintString
    94 000000A3 EB03                    		jmp neg
    95                                  		notNeg:						; conitnue code here if the value is not negative
    96 000000A5 4801C3                  		add rbx, rax				;add the value to the total
    97                                  		neg:	
    98                                  
    99 000000A8 50                      		push rax					;prepare to print
   100 000000A9 E8(00000000)            		call Print64bitNumDecimal	;Print values
   101 000000AE 4883F901                		cmp rcx, 1
   102 000000B2 7405                    		je lastOne
   103 000000B4 E8(00000000)            		call PrintComma				;Print a coma
   104                                  		lastOne:
   105 000000B9 4883C708                		add rdi, 8
   106 000000BD E2C9                    	loop loopie
   107                                  	
   108 000000BF E8(00000000)            	call Printendl					;line spacing
   109                                  	
   110                                  	
   111                                  	;------ Print total----------
   112 000000C4 68[A0000000]            	push totalAct					;Print total prompt
   113 000000C9 E8(00000000)            	call PrintString				;Print it
   114 000000CE 4889DA                  	mov rdx, rbx
   115 000000D1 F8                      	clc								;Clear he carry flag: will be used to determine sign of total
   116 000000D2 480FBAE33F              	bt rbx, 63						;get the SIGNficiant bit of the total (storedin rbx)
   117 000000D7 730D                    	jnc notNeg2						;jump if not negative
   118 000000D9 48F7DB                  	neg rbx							;but if it negative, re-negate it
   119 000000DC 68[D4000000]            	push PrintMinus					;and also print a minux sign
   120 000000E1 E8(00000000)            	call PrintString				; Print it
   121                                  	notNeg2:						;But, if the total (in rbx) is not negative:
   122 000000E6 53                      	push rbx						;Prepare printing total
   123 000000E7 E8(00000000)            	call Print64bitNumDecimal		; print total
   124 000000EC E8(00000000)            	call Printendl
   125                                  	
   126                                  	
   127                                  	;----------Calculate average----------
   128                                  	;carry still holds the negation value!
   129 000000F1 B800000000              	mov rax, 0						;clear rax
   130 000000F6 4889D8                  	mov rax, rbx					;now rax holds the total
   131 000000F9 488B4D18                	mov rcx, [rbp + 24]				;now rcx holds valuesArray.len
   132 000000FD BB00000000              	mov rbx, 0
   133 00000102 4889D3                  	mov rbx, rdx
   134 00000105 99                      	cdq								;Expand to avoid floating point exception
   135 00000106 48F7F9                  	idiv rcx						;divide rax with 5 - CHANGE TO A LENGTH VARIABLE
   136                                  	
   137 00000109 68[93000000]            	push avgAct						;prepare to print average act
   138 0000010E E8(00000000)            	call PrintString				;print it
   139 00000113 F8                      	clc
   140 00000114 480FBAE33F              	bt rbx, 63					;check SIGNificant bit	
   141 00000119 730A                    	jnc notNeg3					;if the number is negative {
   142 0000011B 68[D4000000]            	push PrintMinus					;print a minus
   143 00000120 E8(00000000)            	call PrintString				;}
   144                                  	notNeg3:						;else {...}	
   145 00000125 50                      	push rax						;cout <<
   146 00000126 E8(00000000)            	call Print64bitNumDecimal		;average <<
   147 0000012B E8(00000000)            	call Printendl					;endl;
   148                                  	
   149                                  	;sub rsp, 8						;create enough room for an average 
   150 00000130 50                      	push rax						;rax (average(abs)) is now in the stack in RBP - 8 ;automatically does rsp - 8
   151 00000131 B800000000              	mov rax, 0
   152                                  	
   153 00000136 BE00000000              	mov rsi, 0
   154                                  						;create enough room for a pointer for another array
   155                                  	;call Printendl
   156                                  	;push PrintMinus
   157                                  	;call PrintString
   158                                  	;call Printendl
   159                                  	;by now we should have x qw values in the stack
   160                                  	;--------- CALCULATE THE AVERAGE OF THE NEW ARRAY ----------
   161 0000013B 488B55F8                	mov rdx, [rbp - 8]					;RDX now holds the values mean (RDX = AVERAGE)
   162 0000013F B800000000              	mov rax, 0	
   163 00000144 BF00000000              	mov rdi, 0					;clear RAX register
   164 00000149 488B4D18                	mov rcx, [rbp + 24]						;Do we pass the number of elements as a parameter? - CHANGE
   165 0000014D 488B7D10                	mov rdi, [rbp + 16]
   166                                  	varianceArrayLoop:
   167                                  		;sub rsp, 8					;create space for one more values in the array
   168 00000151 488B07                  		mov rax, [rdi]				;move to rbx the dereferenced value stored in the rdi pointer
   169 00000154 488B55F8                		mov rdx, [rbp - 8]
   170 00000158 F8                      		clc
   171 00000159 480FBAE03F              		bt rax, 63
   172 0000015E 7308                    		jnc	pos						;not a negative
   173 00000160 48F7D8                  			neg rax
   174 00000163 4801D0                  			add rax, rdx				;if negaative, substract and take absolute value
   175 00000166 EB03                    		jmp posCont
   176                                  		pos:
   177 00000168 4829D0                  			sub rax, rdx			;subtract the average in RDX from the current rax value
   178                                  		posCont:
   179                                  		
   180 0000016B 48F7E8                  		imul rax					;Squar the edited value, does something to rdx everytime, so we have to reassign the value to rdx
   181 0000016E 4883EC08                		sub rsp, 8					;create stack room for 8 more bits
   182 00000172 48890424                		mov QWORD [rsp], rax
   183                                  		
   184 00000176 4883C708                		add rdi, 8 					;increase rdi (the iterator)
   185                                  		
   186 0000017A B800000000              		mov rax, 0					;go to the next argument in the array, whose address is stored in the rdi pointer
   187 0000017F E2D0                    	loop varianceArrayLoop
   188                                  	
   189                                  	;----- CALCULATE AVERAGE OF SQUARED VALUES
   190 00000181 B900000000              	mov rcx, 0
   191 00000186 488B4D18                	mov rcx, [rbp + 24]				;the number of elementsin the original array passed to the function
   192 0000018A B800000000              	mov rax, 0						;RBX is going to hold our total
   193 0000018F 4889E2                  	mov rdx, rsp
   194                                  	loopom:
   195 00000192 482B02                  	sub rax, [rdx]
   196                                  	
   197 00000195 4883C208                	add rdx, 8
   198                                  			
   199 00000199 48F7D8                  			neg rax
   200 0000019C 50                      			push rax
   201 0000019D E8(00000000)            			call Print64bitNumDecimal
   202 000001A2 E8(00000000)            			call Printendl
   203 000001A7 E2E9                    	loop loopom
   204                                  	
   205 000001A9 B900000000              	mov rcx, 0
   206 000001AE 488B4D18                	mov rcx, [rbp + 24]
   207                                  	
   208 000001B2 50                      	push rax							;
   209 000001B3 E8(00000000)            	call Print64bitNumDecimal
   210 000001B8 E8(00000000)            	call Printendl
   211 000001BD 99                      	cdq									;Exapnd into RAX:RDX to avoid floating point exception
   212                                  	
   213 000001BE 48F7F9                  	idiv rcx
   214                                  	
   215 000001C1 68[C2000000]            	push VarianceAct
   216 000001C6 E8(00000000)            	call PrintString
   217                                  								;Divide by the number of elements
   218 000001CB 50                      	push rax							;
   219 000001CC E8(00000000)            	call Print64bitNumDecimal
   220 000001D1 E8(00000000)            	call Printendl
   221                                  	;=========== DESTROY STACK ==============
   222 000001D6 4889EC                  	mov rsp, rbp					;Restore the stack position
   223 000001D9 5D                      	pop rbp							;Restore ebp's original value in the stack frame
   224                                  	
   225 000001DA C3                      ret 	
   226                                  
   227                                  ;============= SPACE FOR CONVENIENCE ==================
   228                                  
   229                                  
   230                                  
   231                                  
   232                                  ;//// TODO
   233                                  ;1 fix minus sign in the average printing
   234                                  
   235                                  
   236                                  
   237                                  
   238                                  
   239                                  
   240                                  
   241                                  
