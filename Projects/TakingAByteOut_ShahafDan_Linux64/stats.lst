     1                                  
     2                                  %include "./functions64.inc"
     1                              <1> ;
     2                              <1> ;
     3                              <1> ;Include file for the functions library
     4                              <1> ;
     5                              <1> 
     6                              <1> ;Print a string with an ending 00h delimiter to the console
     7                              <1> ;Stack Contents:
     8                              <1> ;	Address of the String (Stack)
     9                              <1> ;Example Usage:
    10                              <1> ;	push	stringVariable
    11                              <1> ;	call	PrintString
    12                              <1> ;
    13                              <1> extern		PrintString
    14                              <1> 
    15                              <1> ;Print a space to the console
    16                              <1> ;Stack Contents:
    17                              <1> ;	None
    18                              <1> ;Example Usage:
    19                              <1> ;	call	PrintSpace
    20                              <1> ;
    21                              <1> extern		PrintSpace
    22                              <1> 
    23                              <1> ;Print 'x' number of spaces
    24                              <1> ;Stack Contents:
    25                              <1> ;	the total spaces to print
    26                              <1> ;Example Usage:
    27                              <1> ;	push	DWORD 5
    28                              <1> ;	call	PrintSpaces
    29                              <1> ;
    30                              <1> extern		PrintSpaces
    31                              <1> 
    32                              <1> ;Print a comma to the console
    33                              <1> ;Stack Contents:
    34                              <1> ;	None
    35                              <1> ;Example Usage:
    36                              <1> ;	call	PrintComma
    37                              <1> ;
    38                              <1> extern		PrintComma
    39                              <1> 
    40                              <1> ;Print a new line to the console
    41                              <1> ;Stack Contents:
    42                              <1> ;	None
    43                              <1> ;Example Usage:
    44                              <1> ;	call	Printendl
    45                              <1> ;
    46                              <1> extern		Printendl
    47                              <1> 
    48                              <1> ;Print a string which is not null terminated
    49                              <1> ;Stack contents:
    50                              <1> ;	The Address of the string to print
    51                              <1> ;	The length of the string to print
    52                              <1> ;Example Usage:
    53                              <1> ;	push	stringVariable
    54                              <1> ;	push	stringVariable.len
    55                              <1> ;	call	PrintText
    56                              <1> ;
    57                              <1> extern		PrintText
    58                              <1> 
    59                              <1> ;Convert and then print a 64bit hex number
    60                              <1> ;Stack contents:
    61                              <1> ;	Value to Convert to an Ascii String
    62                              <1> ;Example Usage:
    63                              <1> ;	push	QWORD [quadWordVariable]
    64                              <1> ;	call	Print64bitNumHex
    65                              <1> ;
    66                              <1> extern		Print64bitNumHex
    67                              <1>    
    68                              <1> ;Convert and then print a 64bit octal number
    69                              <1> ;Stack contents:
    70                              <1> ;	Value to Convert to an Ascii String
    71                              <1> ;Example Usage:
    72                              <1> ;	push	QWORD [quadWordVariable]
    73                              <1> ;	call	Print64bitNumOctal
    74                              <1> ;
    75                              <1> extern		Print64bitNumOctal
    76                              <1> 
    77                              <1> ;Convert and then print a 64bit decimal number
    78                              <1> ;Stack contents:
    79                              <1> ;	Value to Convert to an Ascii String
    80                              <1> ;Example Usage:
    81                              <1> ;	push QWORD [quadwordvariable]
    82                              <1> ;	call	Print64bitNumDecimal
    83                              <1> ;
    84                              <1> extern		Print64bitNumDecimal
    85                              <1> 
    86                              <1> ;Convert and then print a signed 64bit decimal number
    87                              <1> ;Stack contents:
    88                              <1> ;	Value to Convert to an Ascii String
    89                              <1> ;Example Usage:
    90                              <1> ;	push QWORD [quadwordvariable]
    91                              <1> ;	call	Print64bitNumDecimal
    92                              <1> ;
    93                              <1> extern		Print64bitSNumDecimal
    94                              <1> 
    95                              <1> ;Convert and then print a 64bit binary number
    96                              <1> ;Stack contents:
    97                              <1> ;	Value to Convert to an Ascii String
    98                              <1> ;Example Usage:
    99                              <1> ;	push QWORD [quadwordvariable]
   100                              <1> ;	call	Print64bitNumBinary
   101                              <1> ;
   102                              <1> extern		Print64bitNumBinary
   103                              <1> 
   104                              <1> ;Print a full 64bit binary number including leading zeros
   105                              <1> ;Stack contents:
   106                              <1> ;	Value to Convert to an Ascii String
   107                              <1> ;Example Usage:
   108                              <1> ;	push QWORD [quadwordvariable]
   109                              <1> ;	call	Print64bitFullBinary
   110                              <1> ;
   111                              <1> extern		Print64bitFullBinary
   112                              <1> 
   113                              <1> ;This routine prints a string to the screen left justified
   114                              <1> ;Stack contents:
   115                              <1> ;	Address of the string [ebp + 16]
   116                              <1> ;	Number of characters it will be justified within [ebp + 24]
   117                              <1> ;Example Usage:
   118                              <1> ;	push	stringVariable
   119                              <1> ;	push	QWORD 80
   120                              <1> ;	call	PrintLeft
   121                              <1> ;
   122                              <1> extern		PrintLeft
   123                              <1> 
   124                              <1> ;This routine prints a string to the screen right justified
   125                              <1> ;Stack contents:
   126                              <1> ;	Address of the string [ebp + 16]
   127                              <1> ;	Number of characters it will be justified within [ebp + 24]
   128                              <1> ;Example Usage:
   129                              <1> ;	push	stringVariable
   130                              <1> ;	push	QWORD 80
   131                              <1> ;	call	PrintRight
   132                              <1> ;
   133                              <1> extern		PrintRight
   134                              <1> 
   135                              <1> ;This routine prints a string to the screen center justified
   136                              <1> ;Stack contents:
   137                              <1> ;	Address of the string [ebp + 16]
   138                              <1> ;	Number of characters it will be justified within [ebp + 24]
   139                              <1> ;Example Usage:
   140                              <1> ;	push	stringVariable
   141                              <1> ;	push	QWORD 80
   142                              <1> ;	call	PrintCenter
   143                              <1> ;
   144                              <1> extern		PrintCenter
   145                              <1> 
   146                              <1> ;Print all 64bit Registers to the screen
   147                              <1> ;Stack contents:
   148                              <1> ;	None
   149                              <1> ;Example Usage:
   150                              <1> ;	call	PrintRegisters
   151                              <1> ;
   152                              <1> extern		PrintRegisters
   153                              <1> 
   154                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   155                              <1> ;Stack Contents:
   156                              <1> ;	Address of keyboard buffer
   157                              <1> ;	Size of the keyboard buffer
   158                              <1> ;Return:
   159                              <1> ;	Rax will contain the number of characters the user input
   160                              <1> ;Example Usage:
   161                              <1> ;	push	readbuffer
   162                              <1> ;	push	readbuffer.len
   163                              <1> ;	call	ReadText
   164                              <1> extern		ReadText
   165                              <1> 
   166                              <1> ;Input UnSigned Int 
   167                              <1> ;This function will let the user input an integer returned into the RAX register
   168                              <1> ;Arguments: None
   169                              <1> ;Return: 	rax will contain the usigned ingeter
   170                              <1> ;			Carry flag will be set if invalid integer was input
   171                              <1> ;Example Usage:
   172                              <1> ;	call	InputInt
   173                              <1> ;	Note: eax will contain the value of the unsigned integer entered
   174                              <1> ;	jnc		validIntegerInput
   175                              <1> ;	Otherwise, an invalid integer was input
   176                              <1> extern		InputUInt
   177                              <1> 
   178                              <1> ;Input Signed Int 
   179                              <1> ;This function will let the user input a signed integer and put the value 
   180                              <1> ;into the RAX register.
   181                              <1> ;Arguments: None
   182                              <1> ;Return: 	eax will contain the usigned ingeter
   183                              <1> ;			Carry flag will be set if invalid integer was input
   184                              <1> ;Example Usage:
   185                              <1> ;	call	InputSInt
   186                              <1> ;	Note: eax will contain the value of the signed integer entered
   187                              <1> ;	jnc		validIntegerInput
   188                              <1> ;	Otherwise, an invalid integer was input
   189                              <1> extern		InputSInt
   190                              <1> 
   191                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   192                              <1> ;Stack Contents:
   193                              <1> ;	Address of the string to print
   194                              <1> ;	Address of keyboard buffer
   195                              <1> ;	Size of the keyboard buffer
   196                              <1> ;Return:
   197                              <1> ;	Rax will contain the number of characters input
   198                              <1> ;Example Usage:
   199                              <1> ;	push	inputPromptVariable
   200                              <1> ;	push	keyboardBufferVariable
   201                              <1> ;	push	keyboardBufferVariable.len  ;This is the maximum size of the buffer
   202                              <1> ;	call	ReadTextWPrompt
   203                              <1> extern		ReadTextWPrompt
   204                              <1> 
   205                              <1> ;Print a Quad-word floating point number
   206                              <1> ;Stack Contents:
   207                              <1> ;	The floating point number to print
   208                              <1> ;Return:
   209                              <1> ;	None
   210                              <1> ;Example Usage:
   211                              <1> ;	push	numberToPrint
   212                              <1> ;	push	[fractionalDigits]
   213                              <1> ;	call	PrintQWFloat
   214                              <1> extern		PrintQWFloat
   215                              <1> 
   216                              <1> ;Print a Double-word floating point number with scientific notation
   217                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   218                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   219                              <1> ;	much easier and shorter algorithm
   220                              <1> ;Stack Contents:
   221                              <1> ;	The floating point number to print
   222                              <1> ;Return:
   223                              <1> ;	None
   224                              <1> ;Example Usage:
   225                              <1> ;	push	[numberToPrint]
   226                              <1> ;	push	[fractionalDigits]
   227                              <1> ;	call	PrintQWFloatSN
   228                              <1> extern		PrintQWFloatSN
   229                              <1> 
   230                              <1> ;Input a Floating Point Number	
   231                              <1> ;This function will let the user input a string, then it will check it to make sure it
   232                              <1> ;is a valid floating point number.  It will then convert the ASCII string into a QWORD 
   233                              <1> ;and return that value in the RAX register.
   234                              <1> ;Stack Contents:
   235                              <1> ;	None
   236                              <1> ;Return: 	RAX and ST(0) will contain the number
   237                              <1> ;			Carry flag will be set if invalid binary number was input
   238                              <1> ;Example Usage:
   239                              <1> ;	call	InputFloat
   240                              <1> ;	jnc		ValidFloatLabel
   241                              <1> ;	otherwise, a problem occured - print an error message
   242                              <1> extern		InputFloat
   243                              <1> 	
   244                              <1> ;Input Binary Number
   245                              <1> ;This function will let the user input a string, then it will check it to make sure it
   246                              <1> ;is a binary string.  It will then convert the ASCII string into a DWORD and return
   247                              <1> ;that value in the RAX register.
   248                              <1> ;Arguments: 
   249                              <1> ;	None
   250                              <1> ;Return: 	rax will contain the numeric binary value
   251                              <1> ;			Carry flag will be set if invalid binary number was input
   252                              <1> ;Example Usage:
   253                              <1> ;	call	InputBin
   254                              <1> ;	jnc		ValidBinLabel
   255                              <1> ;	otherwise, a problem occured - print an error message
   256                              <1> extern		InputBin
   257                              <1> 
   258                              <1> ;This function will let the user input a string, then it will check it to make sure it
   259                              <1> ;is a hexidecimal string.  It will then convert the ASCII string into a DWORD and return
   260                              <1> ;that value in the EAX register.
   261                              <1> ;Arguments: 
   262                              <1> ;	None
   263                              <1> ;Return: 	rax will contain the numeric hexidecimal value
   264                              <1> ;			Carry flag will be set if invalid hex number was input
   265                              <1> ;Example Usage:
   266                              <1> ;	call	InputHex
   267                              <1> ;	jnc		ValidHexLabel
   268                              <1> ;	otherwise, a problem occured - print an error message
   269                              <1> extern		InputHex
   270                              <1> 
   271                              <1> ;Print all of the floating point registers ST0 - ST7
   272                              <1> ;Stack Contents:
   273                              <1> ;	None
   274                              <1> ;Return: 	None
   275                              <1> ;Example Usage:
   276                              <1> ;	call	PrintFloatingRegisters
   277                              <1> extern		PrintFloatingRegisters
   278                              <1> 
   279                              <1> ;Print a 64-bit floating point number
   280                              <1> ;Stack Contents:
   281                              <1> ;	The floating point number
   282                              <1> ;Return: 	None
   283                              <1> ;Example Usage:
   284                              <1> ;	call	Print64bitFloatBinary
   285                              <1> extern		Print64bitFloatBinary
   286                              <1> 
   287                              <1> ;Set the carry flag if the floating poing number pushed onto the Stack
   288                              <1> ;is a +NAN, -NAN, +Infinity or -Infinity
   289                              <1> ;Stack Contents:
   290                              <1> ; QWORD Floating Point number (Stack)
   291                              <1> ;Return: Carry Flag Set if NAN, Clear if OK
   292                              <1> ;Example Usage
   293                              <1> ;   push  QWORD [floatingVariable]
   294                              <1> ;   call  IsNAN
   295                              <1> extern		IsNAN
   296                              <1> 
   297                              <1> ;Clears the keyboard buffer until \n or null are encountered
   298                              <1> ;Stack contents:
   299                              <1> ;	None
   300                              <1> ;Example Usage:
   301                              <1> ;	call	ClearKBuffer
   302                              <1> ;
   303                              <1> extern		ClearKBuffer
   304                              <1> 
   305                              <1> ;An Internal function used to get the system time in hours
   306                              <1> ;Stack Contents:
   307                              <1> ; None
   308                              <1> ;Return: RAX will have the current Hour
   309                              <1> ;Example Usage
   310                              <1> ;	call	GetCurrentHour
   311                              <1> extern		GetCurrentHour
   312                              <1> 
   313                              <1> ;An Internal function used to get the system time in minutes
   314                              <1> ;Stack Contents:
   315                              <1> ; None
   316                              <1> ;Return: RAX will have the current minute
   317                              <1> ;Example Usage
   318                              <1> ;	call	GetCurrentMinute
   319                              <1> extern		GetCurrentMinute
   320                              <1> 
   321                              <1> ;An Internal function used to get the system time in seconds
   322                              <1> ;Stack Contents:
   323                              <1> ; None
   324                              <1> ;Return: RAX will have the current seconds
   325                              <1> ;Example Usage
   326                              <1> ;	call	GetCurrentSecond
   327                              <1> extern		GetCurrentSecond
   328                              <1> 
   329                              <1> ;An Internal function used to get the system year
   330                              <1> ;Stack Contents:
   331                              <1> ; None
   332                              <1> ;Return: RAX will have the current year
   333                              <1> ;Example Usage
   334                              <1> ;	call	GetCurrentYear
   335                              <1> extern		GetCurrentYear
   336                              <1> 
   337                              <1> ;An Internal function used to get the system month
   338                              <1> ;Stack Contents:
   339                              <1> ; None
   340                              <1> ;Return: RAX will have the current month
   341                              <1> ;Example Usage
   342                              <1> ;	call	GetCurrentMonth
   343                              <1> extern		GetCurrentMonth
   344                              <1> 
   345                              <1> ;An Internal function used to get the system day
   346                              <1> ;Stack Contents:
   347                              <1> ; None
   348                              <1> ;Return: RAX will have the current day
   349                              <1> ;Example Usage
   350                              <1> ;	call	GetCurrentDay
   351                              <1> extern		GetCurrentDay
   352                              <1> 
   353                              <1> ;An Internal function used to get the system time hours, minutes, seconds
   354                              <1> ;Stack Contents:
   355                              <1> ; None
   356                              <1> ;Return: None
   357                              <1> ;Example Usage
   358                              <1> ;   call GetSystemTime
   359                              <1> extern		GetSystemTime
   360                              <1> 
   361                              <1> ;Print the time in the format hh:mm:ss
   362                              <1> ;Stack Contents:
   363                              <1> ; None
   364                              <1> ;Return: None
   365                              <1> ;Example Usage
   366                              <1> ;   call PrintSystemTime
   367                              <1> extern		PrintSystemTime
   368                              <1> 
   369                              <1> ;Print the date in the format mm/dd/yyyy
   370                              <1> ;Stack Contents:
   371                              <1> ; None
   372                              <1> ;Return: None
   373                              <1> ;Example Usage
   374                              <1> ;   call PrintSystemDateEng
   375                              <1> extern		PrintSystemDateEng
   376                              <1> 
   377                              <1> ;Print the date in the format yyyy/mm/dd
   378                              <1> ;Stack Contents:
   379                              <1> ; None
   380                              <1> ;Return: None
   381                              <1> ;Example Usage
   382                              <1> ;   call PrintSystemDateEuro
   383                              <1> extern		PrintSystemDateEuro
   384                              <1> 
   385                              <1> ;Convert and then return in a byte array a64-but number in decimal format
   386                              <1> ;Stack contents:
   387                              <1> ;	Value to Convert to an Ascii String
   388                              <1> ;	Address of byte array to contain the result
   389                              <1> ;Return Value:
   390                              <1> ;	rax = Number of characters returned
   391                              <1> ;Example Usage:
   392                              <1> ;	push 	QWORD [quadwordvariable]
   393                              <1> ;	push 	stringbuffer
   394                              <1> ;	call	ToString64bitNumDecimal
   395                              <1> ;
   396                              <1> extern		ToString64bitNumDecimal
   397                              <1> 
   398                              <1> ;Convert and then return in a byte array a 64bit signed number in decimal format
   399                              <1> ;Stack contents:
   400                              <1> ;	Value to Convert to an Ascii String
   401                              <1> ;	Address of byte array to contain the result
   402                              <1> ;Return Value:
   403                              <1> ;	rax = Number of characters returned
   404                              <1> ;Example Usage:
   405                              <1> ;	push 	QWORD [quadwordvariable]
   406                              <1> ;	push 	stringbuffer
   407                              <1> ;	call	ToString64bitSNumDecimal
   408                              <1> ;
   409                              <1> extern		ToString64bitSNumDecimal
   410                              <1> 
   411                              <1> ;Get the system date in English format and return to the calling function in th array
   412                              <1> ;	provided
   413                              <1> ;Stack contents:
   414                              <1> ;	Address of byte array to contain the result
   415                              <1> ;Return Value:
   416                              <1> ;	rax = Number of characters returned
   417                              <1> ;Example Usage:
   418                              <1> ;	push 	stringbuffer
   419                              <1> ;	call	GetEngDateString
   420                              <1> ;
   421                              <1> extern		GetEngDateString
   422                              <1> 
   423                              <1> ;Get the system date in European format and return to the calling function in th array
   424                              <1> ;	provided
   425                              <1> ;Stack contents:
   426                              <1> ;	Address of byte array to contain the result
   427                              <1> ;Return Value:
   428                              <1> ;	rax = Number of characters returned
   429                              <1> ;Example Usage:
   430                              <1> ;	push 	stringbuffer
   431                              <1> ;	call	GetEuroDateString
   432                              <1> ;
   433                              <1> extern		GetEuroDateString
   434                              <1> 
   435                              <1> ;Get the system time and return to the calling function in th array
   436                              <1> ;	provided
   437                              <1> ;Stack contents:
   438                              <1> ;	Address of byte array to contain the result
   439                              <1> ;Return Value:
   440                              <1> ;	rax = Number of characters returned
   441                              <1> ;Example Usage:
   442                              <1> ;	push 	stringbuffer
   443                              <1> ;	call	GetTimeString
   444                              <1> ;
   445                              <1> extern		GetTimeString
   446                              <1> 
   447                              <1> 
   448                              <1> ;Get a random number from the CPU
   449                              <1> ;Stack contents:
   450                              <1> ;	The maximum value of the random number
   451                              <1> ;	Signed = 1, Unsigned = 0
   452                              <1> ;Return Value:
   453                              <1> ;	rax = Random number value
   454                              <1> ;Example Usage:
   455                              <1> ;	push 	QWORD 200			;Will create a random number no greater than 200
   456                              <1> ;	push	QWORD 1				;1 = signed, 0 = uinsigned
   457                              <1> ;	call	GetRandomInt
   458                              <1> ;
   459                              <1> extern		GetRandomInt
   460                              <1> 
   461                              <1> ;Calculate the Variance from an array of numbers
   462                              <1> ;Stack contents:
   463                              <1> ;	Address of sample array of Quad words
   464                              <1> ;	The number of samples to process
   465                              <1> ;Return Value:
   466                              <1> ;	rax = Calculated Variance
   467                              <1> ;Example Usage:
   468                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   469                              <1> ;	push	10					;process 10 of the numbers in the array
   470                              <1> ;	call	CalcVariance
   471                              <1> ;
   472                              <1> extern		CalcVariance
   473                              <1> 
   474                              <1> ;Calculate the Standard Deviation from an array of numbers
   475                              <1> ;Stack contents:
   476                              <1> ;	Address of sample array of Quad words
   477                              <1> ;	The number of samples to process
   478                              <1> ;Return Value:
   479                              <1> ;	rax = Calculated Standard Deviation
   480                              <1> ;Example Usage:
   481                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   482                              <1> ;	push	10					;process 10 of the numbers in the array
   483                              <1> ;	call	CalcStdDev
   484                              <1> ;
   485                              <1> extern		CalcStdDev
   486                              <1> 
   487                              <1> ;Calculate the Mean from an array of numbers
   488                              <1> ;Stack contents:
   489                              <1> ;	Address of sample array of Quad words
   490                              <1> ;	The number of samples to process
   491                              <1> ;Return Value:
   492                              <1> ;	rax = Calculated Mean
   493                              <1> ;Example Usage:
   494                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   495                              <1> ;	push	10					;process 10 of the numbers in the array
   496                              <1> ;	call	CalcMean
   497                              <1> ;
   498                              <1> extern		CalcMean
   499                              <1> 
   500                              <1> ;Fills an array with random quad values
   501                              <1> ;Stack contents:
   502                              <1> ;	Address of array of Quad words
   503                              <1> ;	The number of samples to process
   504                              <1> ;	Maximum value of the random number(s)
   505                              <1> ;	Signed = 1, Unsigned = 0
   506                              <1> ;Return Value:
   507                              <1> ;	Nothing
   508                              <1> ;Example Usage:
   509                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   510                              <1> ;	push	10					;process 10 of the numbers in the array
   511                              <1> ;	push	500					;The maximum random value should be 500
   512                              <1> ;	push	0					;Unsigned only
   513                              <1> ;	call	RandomArray
   514                              <1> ;
   515                              <1> extern		RandomArray
     3                                  global calcvariance
     4                                  
     5                                  SECTION     .text
     6                                  ;============== VARIANCE CALCULATOR FUNCTION =================
     7                                  calcvariance:
     8                                  	
     9                                  	;push "-"
    10                                  	;call PrintString
    11                                  
    12                                  	;=========CREATE THE STACK============
    13 00000000 55                      	push rbp 						;Store the current stack frame
    14 00000001 4889E5                  	mov rbp, rsp					;Preserve esp into ebp for argument reference			
    15 00000004 BB00000000              	mov rbx, 0		
    16 00000009 BA00000000              	mov rdx, 0
    17 0000000E B900000000              	mov rcx, 0				;we will store the total in rbx for now
    18                                  	;========= STACK ACTION CODE ============
    19 00000013 488B7D10                	mov rdi, [rbp + 16]				;push the address of the sampleArray stored in rbp + 16 to a pointer variable
    20 00000017 488B4D18                	mov rcx, [rbp + 24];
    21                                  	
    22                                  	loopie:
    23 0000001B 488B07                  		mov rax, [rdi]				;move to rax the dereferenced value stored in the rdi pointer
    24 0000001E F8                      		clc							;clear carry flag, we will use it to detect negative values
    25 0000001F 480FBAE03F              		bt rax, 63					;use bt to store the most SIGNificant bit in the carry flag
    26 00000024 7308                    		jnc notNeg					;if carry flag os 0: not negative
    27 00000026 48F7D8                  		neg rax	
    28 00000029 4829C3                  		sub rbx, rax				;substract the value from the total
    29                                  		
    30                                  		
    31                                  		;------- PRINT MINUSSS-----------
    32                                  		
    33 0000002C EB03                    		jmp neg
    34                                  		notNeg:						; conitnue code here if the value is not negative
    35 0000002E 4801C3                  		add rbx, rax				;add the value to the total
    36                                  		neg:	
    37                                  
    38 00000031 50                      		push rax					;prepare to print
    39 00000032 E8(00000000)            		call Print64bitNumDecimal	;Print values
    40 00000037 4883F901                		cmp rcx, 1
    41 0000003B 7405                    		je lastOne
    42 0000003D E8(00000000)            		call PrintComma				;Print a coma
    43                                  		lastOne:
    44 00000042 4883C708                		add rdi, 8
    45 00000046 E2D3                    	loop loopie
    46                                  	
    47 00000048 E8(00000000)            	call Printendl					;line spacing
    48                                  	
    49                                  	
    50                                  	;------ Print total----------
    51                                  	;push totalAct					;Print total prompt
    52                                  	;call PrintString				;Print it
    53 0000004D 4889DA                  	mov rdx, rbx
    54 00000050 F8                      	clc								;Clear he carry flag: will be used to determine sign of total
    55 00000051 480FBAE33F              	bt rbx, 63						;get the SIGNficiant bit of the total (storedin rbx)
    56 00000056 7303                    	jnc notNeg2						;jump if not negative
    57 00000058 48F7DB                  	neg rbx							;but if it negative, re-negate it
    58                                  	;push PrintMinus					;and also print a minux sign
    59                                  	;call PrintString				; Print it
    60                                  	notNeg2:						;But, if the total (in rbx) is not negative:
    61 0000005B 53                      	push rbx						;Prepare printing total
    62 0000005C E8(00000000)            	call Print64bitNumDecimal		; print total
    63 00000061 E8(00000000)            	call Printendl
    64                                  
    65                                  
    66                                  	
    67                                  	;----------Calculate average----------
    68                                  	;carry still holds the negation value!
    69 00000066 B800000000              	mov rax, 0						;clear rax
    70 0000006B 4889D8                  	mov rax, rbx					;now rax holds the total
    71 0000006E 488B4D18                	mov rcx, [rbp + 24]				;now rcx holds valuesArray.len
    72 00000072 BB00000000              	mov rbx, 0
    73 00000077 4889D3                  	mov rbx, rdx
    74 0000007A 99                      	cdq								;Expand to avoid floating point exception
    75 0000007B 48F7F9                  	idiv rcx						;divide rax with 5 - CHANGE TO A LENGTH VARIABLE
    76                                  	
    77                                  	
    78                                  	;push avgAct						;prepare to print average act
    79                                  	;call PrintString				;print it
    80 0000007E F8                      	clc
    81 0000007F 480FBAE33F              	bt rbx, 63					;check SIGNificant bit	
    82 00000084 7300                    	jnc notNeg3					;if the number is negative {
    83                                  	;push PrintMinus					;print a minus
    84                                  	;call PrintString				;}
    85                                  	notNeg3:						;else {...}	
    86 00000086 50                      	push rax						;cout <<
    87 00000087 E8(00000000)            	call Print64bitNumDecimal		;average <<
    88 0000008C E8(00000000)            	call Printendl					;endl;
    89                                  	
    90                                  	;sub rsp, 8						;create enough room for an average 
    91 00000091 50                      	push rax						;rax (average(abs)) is now in the stack in RBP - 8 ;automatically does rsp - 8
    92 00000092 B800000000              	mov rax, 0
    93                                  	
    94 00000097 BE00000000              	mov rsi, 0
    95                                  						;create enough room for a pointer for another array
    96                                  	;call Printendl
    97                                  	;push PrintMinus
    98                                  	;call PrintString
    99                                  	;call Printendl
   100                                  	;by now we should have x qw values in the stack
   101                                  	;--------- CALCULATE THE AVERAGE OF THE NEW ARRAY ----------
   102 0000009C 488B55F8                	mov rdx, [rbp - 8]					;RDX now holds the values mean (RDX = AVERAGE)
   103 000000A0 B800000000              	mov rax, 0	
   104 000000A5 BF00000000              	mov rdi, 0					;clear RAX register
   105 000000AA 488B4D18                	mov rcx, [rbp + 24]						;Do we pass the number of elements as a parameter? - CHANGE
   106 000000AE 488B7D10                	mov rdi, [rbp + 16]
   107                                  	varianceArrayLoop:
   108                                  		;sub rsp, 8					;create space for one more values in the array
   109 000000B2 488B07                  		mov rax, [rdi]				;move to rbx the dereferenced value stored in the rdi pointer
   110 000000B5 488B55F8                		mov rdx, [rbp - 8]
   111 000000B9 F8                      		clc
   112 000000BA 480FBAE33F              		bt rbx, 63
   113 000000BF 7305                    		jnc	pos						;not a negative
   114                                  			;neg rax
   115 000000C1 4801D0                  			add rax, rdx				;if negaative, substract and take absolute value
   116 000000C4 EB03                    		jmp posCont
   117                                  		pos:
   118 000000C6 4829D0                  			sub rax, rdx			;subtract the average in RDX from the current rax value
   119                                  		posCont:
   120                                  		
   121 000000C9 48F7E8                  		imul rax					;Squar the edited value, does something to rdx everytime, so we have to reassign the value to rdx
   122 000000CC 4883EC08                		sub rsp, 8					;create stack room for 8 more bits
   123 000000D0 48890424                		mov QWORD [rsp], rax
   124                                  		
   125 000000D4 4883C708                		add rdi, 8 					;increase rdi (the iterator)
   126                                  		
   127 000000D8 B800000000              		mov rax, 0					;go to the next argument in the array, whose address is stored in the rdi pointer
   128 000000DD E2D3                    	loop varianceArrayLoop
   129                                  	
   130                                  	;----- CALCULATE AVERAGE OF SQUARED VALUES
   131 000000DF B900000000              	mov rcx, 0
   132 000000E4 488B4D18                	mov rcx, [rbp + 24]				;the number of elementsin the original array passed to the function
   133 000000E8 B800000000              	mov rax, 0						;RBX is going to hold our total
   134 000000ED 4889E2                  	mov rdx, rsp
   135                                  	
   136                                  	loopom:
   137                                  	
   138 000000F0 480302                  	add rax, [rdx]					;calculate the average (whihc must be positive) of the squared values
   139 000000F3 4883C208                	add rdx, 8
   140 000000F7 4883C608                	add rsi, 8
   141 000000FB E2F3                    	loop loopom
   142 000000FD B900000000              	mov rcx, 0
   143 00000102 488B4D18                	mov rcx, [rbp + 24]
   144                                  	
   145 00000106 99                      	cdq									;Exapnd into RAX:RDX to avoid floating point exception
   146                                  	
   147 00000107 48F7F9                  	idiv rcx
   148                                  	
   149                                  	push VarianceAct
   149          ******************       error: symbol `VarianceAct' undefined
   150 0000010A E8(00000000)            	call PrintString
   151                                  								;Divide by the number of elements
   152 0000010F 50                      	push rax							;
   153 00000110 E8(00000000)            	call Print64bitNumDecimal
   154 00000115 E8(00000000)            	call Printendl
   155                                  	;=========== DESTROY STACK ==============
   156 0000011A 4889EC                  	mov rsp, rbp					;Restore the stack position
   157 0000011D 5D                      	pop rbp							;Restore ebp's original value in the stack frame
   158                                  	
   159 0000011E C3                      ret 	
